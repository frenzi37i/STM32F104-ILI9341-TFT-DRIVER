
LCD_ILI9341_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007158  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b40  08007264  08007264  00017264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da4  08008da4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008da4  08008da4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008da4  08008da4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da4  08008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000078  08008e24  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08008e24  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014364  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b03  00000000  00000000  00034405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00036f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad1e  00000000  00000000  00039550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017805  00000000  00000000  0005426e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009925f  00000000  00000000  0006ba73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b0  00000000  00000000  00104d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800724c 	.word	0x0800724c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800724c 	.word	0x0800724c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__gesf2>:
 8000368:	f04f 3cff 	mov.w	ip, #4294967295
 800036c:	e006      	b.n	800037c <__cmpsf2+0x4>
 800036e:	bf00      	nop

08000370 <__lesf2>:
 8000370:	f04f 0c01 	mov.w	ip, #1
 8000374:	e002      	b.n	800037c <__cmpsf2+0x4>
 8000376:	bf00      	nop

08000378 <__cmpsf2>:
 8000378:	f04f 0c01 	mov.w	ip, #1
 800037c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000380:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000384:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000388:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800038c:	bf18      	it	ne
 800038e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000392:	d011      	beq.n	80003b8 <__cmpsf2+0x40>
 8000394:	b001      	add	sp, #4
 8000396:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800039a:	bf18      	it	ne
 800039c:	ea90 0f01 	teqne	r0, r1
 80003a0:	bf58      	it	pl
 80003a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003a6:	bf88      	it	hi
 80003a8:	17c8      	asrhi	r0, r1, #31
 80003aa:	bf38      	it	cc
 80003ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003b0:	bf18      	it	ne
 80003b2:	f040 0001 	orrne.w	r0, r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	d102      	bne.n	80003c4 <__cmpsf2+0x4c>
 80003be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003c2:	d105      	bne.n	80003d0 <__cmpsf2+0x58>
 80003c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003c8:	d1e4      	bne.n	8000394 <__cmpsf2+0x1c>
 80003ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003ce:	d0e1      	beq.n	8000394 <__cmpsf2+0x1c>
 80003d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <__aeabi_cfrcmple>:
 80003d8:	4684      	mov	ip, r0
 80003da:	4608      	mov	r0, r1
 80003dc:	4661      	mov	r1, ip
 80003de:	e7ff      	b.n	80003e0 <__aeabi_cfcmpeq>

080003e0 <__aeabi_cfcmpeq>:
 80003e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80003e2:	f7ff ffc9 	bl	8000378 <__cmpsf2>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	bf48      	it	mi
 80003ea:	f110 0f00 	cmnmi.w	r0, #0
 80003ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080003f0 <__aeabi_fcmpeq>:
 80003f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80003f4:	f7ff fff4 	bl	80003e0 <__aeabi_cfcmpeq>
 80003f8:	bf0c      	ite	eq
 80003fa:	2001      	moveq	r0, #1
 80003fc:	2000      	movne	r0, #0
 80003fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000402:	bf00      	nop

08000404 <__aeabi_fcmplt>:
 8000404:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000408:	f7ff ffea 	bl	80003e0 <__aeabi_cfcmpeq>
 800040c:	bf34      	ite	cc
 800040e:	2001      	movcc	r0, #1
 8000410:	2000      	movcs	r0, #0
 8000412:	f85d fb08 	ldr.w	pc, [sp], #8
 8000416:	bf00      	nop

08000418 <__aeabi_fcmple>:
 8000418:	f84d ed08 	str.w	lr, [sp, #-8]!
 800041c:	f7ff ffe0 	bl	80003e0 <__aeabi_cfcmpeq>
 8000420:	bf94      	ite	ls
 8000422:	2001      	movls	r0, #1
 8000424:	2000      	movhi	r0, #0
 8000426:	f85d fb08 	ldr.w	pc, [sp], #8
 800042a:	bf00      	nop

0800042c <__aeabi_fcmpge>:
 800042c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000430:	f7ff ffd2 	bl	80003d8 <__aeabi_cfrcmple>
 8000434:	bf94      	ite	ls
 8000436:	2001      	movls	r0, #1
 8000438:	2000      	movhi	r0, #0
 800043a:	f85d fb08 	ldr.w	pc, [sp], #8
 800043e:	bf00      	nop

08000440 <__aeabi_fcmpgt>:
 8000440:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000444:	f7ff ffc8 	bl	80003d8 <__aeabi_cfrcmple>
 8000448:	bf34      	ite	cc
 800044a:	2001      	movcc	r0, #1
 800044c:	2000      	movcs	r0, #0
 800044e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000452:	bf00      	nop

08000454 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	4604      	mov	r4, r0
 800045c:	4608      	mov	r0, r1
 800045e:	4611      	mov	r1, r2
 8000460:	461a      	mov	r2, r3
 8000462:	4623      	mov	r3, r4
 8000464:	80fb      	strh	r3, [r7, #6]
 8000466:	4603      	mov	r3, r0
 8000468:	80bb      	strh	r3, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	807b      	strh	r3, [r7, #2]
 800046e:	4613      	mov	r3, r2
 8000470:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	3b01      	subs	r3, #1
 8000476:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000480:	2301      	movs	r3, #1
 8000482:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8000484:	887b      	ldrh	r3, [r7, #2]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 800048e:	e08d      	b.n	80005ac <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	b29a      	uxth	r2, r3
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	4413      	add	r3, r2
 8000498:	b298      	uxth	r0, r3
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	b29a      	uxth	r2, r3
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	883a      	ldrh	r2, [r7, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	f000 fd7e 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	4413      	add	r3, r2
 80004b4:	b298      	uxth	r0, r3
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	88bb      	ldrh	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	b29b      	uxth	r3, r3
 80004c0:	883a      	ldrh	r2, [r7, #0]
 80004c2:	4619      	mov	r1, r3
 80004c4:	f000 fd70 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80004c8:	69bb      	ldr	r3, [r7, #24]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	88fa      	ldrh	r2, [r7, #6]
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	b298      	uxth	r0, r3
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	88bb      	ldrh	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	b29b      	uxth	r3, r3
 80004dc:	883a      	ldrh	r2, [r7, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	f000 fd62 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	88fa      	ldrh	r2, [r7, #6]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	b298      	uxth	r0, r3
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	88bb      	ldrh	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	883a      	ldrh	r2, [r7, #0]
 80004fa:	4619      	mov	r1, r3
 80004fc:	f000 fd54 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	b29b      	uxth	r3, r3
 8000504:	88fa      	ldrh	r2, [r7, #6]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b298      	uxth	r0, r3
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	b29b      	uxth	r3, r3
 800050e:	88ba      	ldrh	r2, [r7, #4]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	b29b      	uxth	r3, r3
 8000514:	883a      	ldrh	r2, [r7, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	f000 fd46 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	b29b      	uxth	r3, r3
 8000520:	88fa      	ldrh	r2, [r7, #6]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	b298      	uxth	r0, r3
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	b29b      	uxth	r3, r3
 800052a:	88ba      	ldrh	r2, [r7, #4]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	b29b      	uxth	r3, r3
 8000530:	883a      	ldrh	r2, [r7, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	f000 fd38 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	b29a      	uxth	r2, r3
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	4413      	add	r3, r2
 8000540:	b298      	uxth	r0, r3
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	b29b      	uxth	r3, r3
 8000546:	88ba      	ldrh	r2, [r7, #4]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	883a      	ldrh	r2, [r7, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	f000 fd2a 	bl	8000fa8 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	b29a      	uxth	r2, r3
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	4413      	add	r3, r2
 800055c:	b298      	uxth	r0, r3
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	b29b      	uxth	r3, r3
 8000562:	88ba      	ldrh	r2, [r7, #4]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	b29b      	uxth	r3, r3
 8000568:	883a      	ldrh	r2, [r7, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	f000 fd1c 	bl	8000fa8 <ILI9341_DrawPixel>

		if (err <= 0)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	dc09      	bgt.n	800058a <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	3301      	adds	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
			err += dy;
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	4413      	add	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	3302      	adds	r3, #2
 8000588:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd0d      	ble.n	80005ac <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	3b01      	subs	r3, #1
 8000594:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3302      	adds	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	425b      	negs	r3, r3
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	4413      	add	r3, r2
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	4413      	add	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	f6bf af6d 	bge.w	8000490 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3724      	adds	r7, #36	; 0x24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd90      	pop	{r4, r7, pc}

080005c0 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4604      	mov	r4, r0
 80005c8:	4608      	mov	r0, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	4623      	mov	r3, r4
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4603      	mov	r3, r0
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	460b      	mov	r3, r1
 80005d8:	807b      	strh	r3, [r7, #2]
 80005da:	4613      	mov	r3, r2
 80005dc:	803b      	strh	r3, [r7, #0]

	int x = radius;
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	f1c3 0301 	rsb	r3, r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

	while (x >= y)
 80005f8:	e061      	b.n	80006be <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	e018      	b.n	8000636 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	b298      	uxth	r0, r3
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	b29a      	uxth	r2, r3
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	883a      	ldrh	r2, [r7, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f000 fcc7 	bl	8000fa8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	b298      	uxth	r0, r3
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	b29b      	uxth	r3, r3
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	883a      	ldrh	r2, [r7, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f000 fcbc 	bl	8000fa8 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	3301      	adds	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	88fa      	ldrh	r2, [r7, #6]
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	4413      	add	r3, r2
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	429a      	cmp	r2, r3
 8000640:	dde0      	ble.n	8000604 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e018      	b.n	800067e <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	b298      	uxth	r0, r3
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	b29a      	uxth	r2, r3
 8000654:	88bb      	ldrh	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	883a      	ldrh	r2, [r7, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	f000 fca3 	bl	8000fa8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	b298      	uxth	r0, r3
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	b29b      	uxth	r3, r3
 800066a:	88ba      	ldrh	r2, [r7, #4]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	883a      	ldrh	r2, [r7, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	f000 fc98 	bl	8000fa8 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	6a3b      	ldr	r3, [r7, #32]
 8000682:	4413      	add	r3, r2
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	429a      	cmp	r2, r3
 8000688:	dde0      	ble.n	800064c <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	3301      	adds	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	3302      	adds	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	4413      	add	r3, r2
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dd09      	ble.n	80006be <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	3b01      	subs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	3302      	adds	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 80006be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	da99      	bge.n	80005fa <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	372c      	adds	r7, #44	; 0x2c
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4604      	mov	r4, r0
 80006d8:	4608      	mov	r0, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	4623      	mov	r3, r4
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	4603      	mov	r3, r0
 80006e4:	80bb      	strh	r3, [r7, #4]
 80006e6:	460b      	mov	r3, r1
 80006e8:	807b      	strh	r3, [r7, #2]
 80006ea:	4613      	mov	r3, r2
 80006ec:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8000704:	887a      	ldrh	r2, [r7, #2]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdd8 	bl	80002c0 <__aeabi_i2f>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negX = 1;
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fe73 	bl	8000404 <__aeabi_fcmplt>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <ILI9341_DrawHollowRectangleCoord+0x58>
 8000724:	2301      	movs	r3, #1
 8000726:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800072e:	883a      	ldrh	r2, [r7, #0]
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fdc3 	bl	80002c0 <__aeabi_i2f>
 800073a:	4603      	mov	r3, r0
 800073c:	60fb      	str	r3, [r7, #12]
	if(negCalc < 0) negY = 1;
 800073e:	f04f 0100 	mov.w	r1, #0
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f7ff fe5e 	bl	8000404 <__aeabi_fcmplt>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <ILI9341_DrawHollowRectangleCoord+0x82>
 800074e:	2301      	movs	r3, #1
 8000750:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 8000752:	7cfb      	ldrb	r3, [r7, #19]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8000758:	887a      	ldrh	r2, [r7, #2]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	82fb      	strh	r3, [r7, #22]
 8000760:	e003      	b.n	800076a <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 800076a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800076c:	8afa      	ldrh	r2, [r7, #22]
 800076e:	88b9      	ldrh	r1, [r7, #4]
 8000770:	88f8      	ldrh	r0, [r7, #6]
 8000772:	f000 fcdb 	bl	800112c <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8000776:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000778:	8afa      	ldrh	r2, [r7, #22]
 800077a:	8839      	ldrh	r1, [r7, #0]
 800077c:	88f8      	ldrh	r0, [r7, #6]
 800077e:	f000 fcd5 	bl	800112c <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8000782:	7cbb      	ldrb	r3, [r7, #18]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8000788:	883a      	ldrh	r2, [r7, #0]
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	82bb      	strh	r3, [r7, #20]
 8000790:	e003      	b.n	800079a <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	883b      	ldrh	r3, [r7, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 800079a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800079c:	8aba      	ldrh	r2, [r7, #20]
 800079e:	88b9      	ldrh	r1, [r7, #4]
 80007a0:	88f8      	ldrh	r0, [r7, #6]
 80007a2:	f000 fd07 	bl	80011b4 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80007a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007a8:	8aba      	ldrh	r2, [r7, #20]
 80007aa:	88b9      	ldrh	r1, [r7, #4]
 80007ac:	8878      	ldrh	r0, [r7, #2]
 80007ae:	f000 fd01 	bl	80011b4 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <ILI9341_DrawHollowRectangleCoord+0xee>
 80007b8:	8abb      	ldrh	r3, [r7, #20]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d005      	beq.n	80007ca <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80007be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80007c0:	8839      	ldrh	r1, [r7, #0]
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fbef 	bl	8000fa8 <ILI9341_DrawPixel>
	}
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}

080007d2 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80007d2:	b590      	push	{r4, r7, lr}
 80007d4:	b08d      	sub	sp, #52	; 0x34
 80007d6:	af02      	add	r7, sp, #8
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	4611      	mov	r1, r2
 80007dc:	461a      	mov	r2, r3
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	460b      	mov	r3, r1
 80007e4:	81bb      	strh	r3, [r7, #12]
 80007e6:	4613      	mov	r3, r2
 80007e8:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b1e      	cmp	r3, #30
 80007ee:	d961      	bls.n	80008b4 <ILI9341_DrawChar+0xe2>
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db5d      	blt.n	80008b4 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	789b      	ldrb	r3, [r3, #2]
 8000808:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	78db      	ldrb	r3, [r3, #3]
 800080e:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3b20      	subs	r3, #32
 8000814:	7ffa      	ldrb	r2, [r7, #31]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	3304      	adds	r3, #4
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	4413      	add	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000822:	7fbb      	ldrb	r3, [r7, #30]
 8000824:	b29a      	uxth	r2, r3
 8000826:	7f7b      	ldrb	r3, [r7, #29]
 8000828:	b29c      	uxth	r4, r3
 800082a:	88f9      	ldrh	r1, [r7, #6]
 800082c:	89b8      	ldrh	r0, [r7, #12]
 800082e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	4623      	mov	r3, r4
 8000834:	f000 fc1e 	bl	8001074 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
 800083c:	e035      	b.n	80008aa <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	e02b      	b.n	800089c <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000844:	7f3b      	ldrb	r3, [r7, #28]
 8000846:	6a3a      	ldr	r2, [r7, #32]
 8000848:	fb03 f202 	mul.w	r2, r3, r2
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	10db      	asrs	r3, r3, #3
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	4413      	add	r3, r2
 8000856:	3301      	adds	r3, #1
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	2201      	movs	r2, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	7dbb      	ldrb	r3, [r7, #22]
 8000872:	4013      	ands	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00d      	beq.n	8000896 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	b29a      	uxth	r2, r3
 800087e:	89bb      	ldrh	r3, [r7, #12]
 8000880:	4413      	add	r3, r2
 8000882:	b298      	uxth	r0, r3
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	b29a      	uxth	r2, r3
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	4413      	add	r3, r2
 800088c:	b29b      	uxth	r3, r3
 800088e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000890:	4619      	mov	r1, r3
 8000892:	f000 fb89 	bl	8000fa8 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	3301      	adds	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
 800089c:	7fbb      	ldrb	r3, [r7, #30]
 800089e:	6a3a      	ldr	r2, [r7, #32]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dbcf      	blt.n	8000844 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80008a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a6:	3301      	adds	r3, #1
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
 80008aa:	7f7b      	ldrb	r3, [r7, #29]
 80008ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dbc5      	blt.n	800083e <ILI9341_DrawChar+0x6c>
 80008b2:	e000      	b.n	80008b6 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80008b4:	bf00      	nop
			}
		}
	}
}
 80008b6:	372c      	adds	r7, #44	; 0x2c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	4611      	mov	r1, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	460b      	mov	r3, r1
 80008cc:	80fb      	strh	r3, [r7, #6]
 80008ce:	4613      	mov	r3, r2
 80008d0:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80008de:	e02d      	b.n	800093c <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	7818      	ldrb	r0, [r3, #0]
 80008e4:	88b9      	ldrh	r1, [r7, #4]
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	460b      	mov	r3, r1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	f7ff ff6d 	bl	80007d2 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3b20      	subs	r3, #32
 80008fe:	7ffa      	ldrb	r2, [r7, #31]
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	3304      	adds	r3, #4
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4413      	add	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	1c9a      	adds	r2, r3, #2
 8000916:	7fbb      	ldrb	r3, [r7, #30]
 8000918:	429a      	cmp	r2, r3
 800091a:	da07      	bge.n	800092c <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800091c:	7dfb      	ldrb	r3, [r7, #23]
 800091e:	b29a      	uxth	r2, r3
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	4413      	add	r3, r2
 8000924:	b29b      	uxth	r3, r3
 8000926:	3302      	adds	r3, #2
 8000928:	80fb      	strh	r3, [r7, #6]
 800092a:	e004      	b.n	8000936 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 800092c:	7fbb      	ldrb	r3, [r7, #30]
 800092e:	b29a      	uxth	r2, r3
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	4413      	add	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3301      	adds	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
	while (*str)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1cd      	bne.n	80008e0 <ILI9341_DrawText+0x24>
	}
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29a      	uxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	611a      	str	r2, [r3, #16]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	615a      	str	r2, [r3, #20]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
	...

0800098c <HAL_SPI_TxCpltCallback>:
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

volatile uint8_t tx_completed = 1;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_SPI_TxCpltCallback+0x28>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d107      	bne.n	80009ac <HAL_SPI_TxCpltCallback+0x20>
  {
#ifdef USE_CS_PIN
	  ILI9341_WritePin(LCD_CS_PORT, LCD_CS_PIN,1);
 800099c:	2201      	movs	r2, #1
 800099e:	2104      	movs	r1, #4
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_SPI_TxCpltCallback+0x2c>)
 80009a2:	f000 fc65 	bl	8001270 <ILI9341_WritePin>
#endif
	  tx_completed = 1;
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_SPI_TxCpltCallback+0x30>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000118 	.word	0x20000118
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	20000004 	.word	0x20000004

080009c0 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t *data, uint8_t msg_type, uint8_t length)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70bb      	strb	r3, [r7, #2]
	// if msg_type == 0, is a command, else is data; used to control the DC pin logic
	// Wait the last transmission to be completed (check if buffer is empty)
	// then activate the DC pin according to data (DC high) or command (DC low)

	//while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
	while(!tx_completed);
 80009d0:	bf00      	nop
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <ILI9341_SPI_Tx+0x64>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0fa      	beq.n	80009d2 <ILI9341_SPI_Tx+0x12>
	tx_completed = 0;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <ILI9341_SPI_Tx+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
#ifdef USE_CS_PIN
	ILI9341_WritePin(LCD_CS_PORT, LCD_CS_PIN,0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <ILI9341_SPI_Tx+0x68>)
 80009e8:	f000 fc42 	bl	8001270 <ILI9341_WritePin>
#endif

	if(msg_type == IS_DATA){
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d106      	bne.n	8000a00 <ILI9341_SPI_Tx+0x40>
		ILI9341_WritePin(LCD_DC_PORT, LCD_DC_PIN,1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f240 1101 	movw	r1, #257	; 0x101
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <ILI9341_SPI_Tx+0x68>)
 80009fa:	f000 fc39 	bl	8001270 <ILI9341_WritePin>
 80009fe:	e005      	b.n	8000a0c <ILI9341_SPI_Tx+0x4c>
	}
	else{
		ILI9341_WritePin(LCD_DC_PORT, LCD_DC_PIN,0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f240 1101 	movw	r1, #257	; 0x101
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <ILI9341_SPI_Tx+0x68>)
 8000a08:	f000 fc32 	bl	8001270 <ILI9341_WritePin>
	}
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, data, length);
 8000a0c:	78bb      	ldrb	r3, [r7, #2]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <ILI9341_SPI_Tx+0x6c>)
 8000a16:	f004 fe5f 	bl	80056d8 <HAL_SPI_Transmit_DMA>
	//transmit data without waiting the finish of the transmission. The next transmission will wait for that in case it's not ended
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000004 	.word	0x20000004
 8000a28:	40010c00 	.word	0x40010c00
 8000a2c:	20000118 	.word	0x20000118

08000a30 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Tx(&cmd,IS_COMMAND,1);
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffbd 	bl	80009c0 <ILI9341_SPI_Tx>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Tx(&data,IS_DATA,1);
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffae 	bl	80009c0 <ILI9341_SPI_Tx>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
	ILI9341_SPI_Tx(buffer,IS_DATA,len);
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2101      	movs	r1, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff9d 	bl	80009c0 <ILI9341_SPI_Tx>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000a8e:	b590      	push	{r4, r7, lr}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4604      	mov	r4, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4611      	mov	r1, r2
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4623      	mov	r3, r4
 8000a9e:	80fb      	strh	r3, [r7, #6]
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	80bb      	strh	r3, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000acc:	202a      	movs	r0, #42	; 0x2a
 8000ace:	f7ff ffaf 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ffc7 	bl	8000a6c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000aee:	883b      	ldrh	r3, [r7, #0]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000afe:	202b      	movs	r0, #43	; 0x2b
 8000b00:	f7ff ff96 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffae 	bl	8000a6c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000b10:	202c      	movs	r0, #44	; 0x2c
 8000b12:	f7ff ff8d 	bl	8000a30 <ILI9341_WriteCommand>
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd90      	pop	{r4, r7, pc}
	...

08000b20 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	ILI9341_WritePin(LCD_RST_PORT, LCD_RST_PIN,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f240 2102 	movw	r1, #514	; 0x202
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <ILI9341_Reset+0x40>)
 8000b2c:	f000 fba0 	bl	8001270 <ILI9341_WritePin>
	HAL_Delay(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f001 fad9 	bl	80020e8 <HAL_Delay>
#ifdef USE_CS_PIN
	ILI9341_WritePin(LCD_CS_PORT, LCD_CS_PIN,0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <ILI9341_Reset+0x40>)
 8000b3c:	f000 fb98 	bl	8001270 <ILI9341_WritePin>
#endif
	HAL_Delay(10);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f001 fad1 	bl	80020e8 <HAL_Delay>
	ILI9341_WritePin(LCD_RST_PORT, LCD_RST_PIN,1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f240 2102 	movw	r1, #514	; 0x202
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <ILI9341_Reset+0x40>)
 8000b4e:	f000 fb8f 	bl	8001270 <ILI9341_WritePin>
#ifdef USE_CS_PIN
	ILI9341_WritePin(LCD_CS_PORT, LCD_CS_PIN,1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2104      	movs	r1, #4
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <ILI9341_Reset+0x40>)
 8000b58:	f000 fb8a 	bl	8001270 <ILI9341_WritePin>
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40010c00 	.word	0x40010c00

08000b64 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	ILI9341_WritePin(LCD_RST_PORT, LCD_RST_PIN,1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f240 2102 	movw	r1, #514	; 0x202
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ILI9341_Enable+0x14>)
 8000b70:	f000 fb7e 	bl	8001270 <ILI9341_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <ILI9341_Init>:

void ILI9341_Init()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000b80:	f7ff fff0 	bl	8000b64 <ILI9341_Enable>
	ILI9341_Reset();
 8000b84:	f7ff ffcc 	bl	8000b20 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff ff51 	bl	8000a30 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f001 faaa 	bl	80020e8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000b94:	20cb      	movs	r0, #203	; 0xcb
 8000b96:	f7ff ff4b 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000b9a:	2039      	movs	r0, #57	; 0x39
 8000b9c:	f7ff ff57 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000ba0:	202c      	movs	r0, #44	; 0x2c
 8000ba2:	f7ff ff54 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ff51 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000bac:	2034      	movs	r0, #52	; 0x34
 8000bae:	f7ff ff4e 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff ff4b 	bl	8000a4e <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000bb8:	20cf      	movs	r0, #207	; 0xcf
 8000bba:	f7ff ff39 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff45 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000bc4:	20c1      	movs	r0, #193	; 0xc1
 8000bc6:	f7ff ff42 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000bca:	2030      	movs	r0, #48	; 0x30
 8000bcc:	f7ff ff3f 	bl	8000a4e <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000bd0:	20e8      	movs	r0, #232	; 0xe8
 8000bd2:	f7ff ff2d 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000bd6:	2085      	movs	r0, #133	; 0x85
 8000bd8:	f7ff ff39 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff36 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f7ff ff33 	bl	8000a4e <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000be8:	20ea      	movs	r0, #234	; 0xea
 8000bea:	f7ff ff21 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff2d 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff ff2a 	bl	8000a4e <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000bfa:	20ed      	movs	r0, #237	; 0xed
 8000bfc:	f7ff ff18 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000c00:	2064      	movs	r0, #100	; 0x64
 8000c02:	f7ff ff24 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff ff21 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000c0c:	2012      	movs	r0, #18
 8000c0e:	f7ff ff1e 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000c12:	2081      	movs	r0, #129	; 0x81
 8000c14:	f7ff ff1b 	bl	8000a4e <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000c18:	20f7      	movs	r0, #247	; 0xf7
 8000c1a:	f7ff ff09 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f7ff ff15 	bl	8000a4e <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000c24:	20c0      	movs	r0, #192	; 0xc0
 8000c26:	f7ff ff03 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000c2a:	2023      	movs	r0, #35	; 0x23
 8000c2c:	f7ff ff0f 	bl	8000a4e <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000c30:	20c1      	movs	r0, #193	; 0xc1
 8000c32:	f7ff fefd 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000c36:	2010      	movs	r0, #16
 8000c38:	f7ff ff09 	bl	8000a4e <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000c3c:	20c5      	movs	r0, #197	; 0xc5
 8000c3e:	f7ff fef7 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000c42:	203e      	movs	r0, #62	; 0x3e
 8000c44:	f7ff ff03 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000c48:	2028      	movs	r0, #40	; 0x28
 8000c4a:	f7ff ff00 	bl	8000a4e <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000c4e:	20c7      	movs	r0, #199	; 0xc7
 8000c50:	f7ff feee 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000c54:	2086      	movs	r0, #134	; 0x86
 8000c56:	f7ff fefa 	bl	8000a4e <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000c5a:	2036      	movs	r0, #54	; 0x36
 8000c5c:	f7ff fee8 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000c60:	2048      	movs	r0, #72	; 0x48
 8000c62:	f7ff fef4 	bl	8000a4e <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000c66:	203a      	movs	r0, #58	; 0x3a
 8000c68:	f7ff fee2 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000c6c:	2055      	movs	r0, #85	; 0x55
 8000c6e:	f7ff feee 	bl	8000a4e <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000c72:	20b1      	movs	r0, #177	; 0xb1
 8000c74:	f7ff fedc 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fee8 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000c7e:	2018      	movs	r0, #24
 8000c80:	f7ff fee5 	bl	8000a4e <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000c84:	20b6      	movs	r0, #182	; 0xb6
 8000c86:	f7ff fed3 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000c8a:	2008      	movs	r0, #8
 8000c8c:	f7ff fedf 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000c90:	2082      	movs	r0, #130	; 0x82
 8000c92:	f7ff fedc 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000c96:	2027      	movs	r0, #39	; 0x27
 8000c98:	f7ff fed9 	bl	8000a4e <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000c9c:	20f2      	movs	r0, #242	; 0xf2
 8000c9e:	f7ff fec7 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fed3 	bl	8000a4e <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ca8:	2026      	movs	r0, #38	; 0x26
 8000caa:	f7ff fec1 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fecd 	bl	8000a4e <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000cb4:	20e0      	movs	r0, #224	; 0xe0
 8000cb6:	f7ff febb 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f7ff fec7 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000cc0:	2031      	movs	r0, #49	; 0x31
 8000cc2:	f7ff fec4 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000cc6:	202b      	movs	r0, #43	; 0x2b
 8000cc8:	f7ff fec1 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ccc:	200c      	movs	r0, #12
 8000cce:	f7ff febe 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000cd2:	200e      	movs	r0, #14
 8000cd4:	f7ff febb 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000cd8:	2008      	movs	r0, #8
 8000cda:	f7ff feb8 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000cde:	204e      	movs	r0, #78	; 0x4e
 8000ce0:	f7ff feb5 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000ce4:	20f1      	movs	r0, #241	; 0xf1
 8000ce6:	f7ff feb2 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000cea:	2037      	movs	r0, #55	; 0x37
 8000cec:	f7ff feaf 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000cf0:	2007      	movs	r0, #7
 8000cf2:	f7ff feac 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000cf6:	2010      	movs	r0, #16
 8000cf8:	f7ff fea9 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f7ff fea6 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d02:	200e      	movs	r0, #14
 8000d04:	f7ff fea3 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000d08:	2009      	movs	r0, #9
 8000d0a:	f7ff fea0 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fe9d 	bl	8000a4e <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000d14:	20e1      	movs	r0, #225	; 0xe1
 8000d16:	f7ff fe8b 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fe97 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d20:	200e      	movs	r0, #14
 8000d22:	f7ff fe94 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000d26:	2014      	movs	r0, #20
 8000d28:	f7ff fe91 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fe8e 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000d32:	2011      	movs	r0, #17
 8000d34:	f7ff fe8b 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d38:	2007      	movs	r0, #7
 8000d3a:	f7ff fe88 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d3e:	2031      	movs	r0, #49	; 0x31
 8000d40:	f7ff fe85 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000d44:	20c1      	movs	r0, #193	; 0xc1
 8000d46:	f7ff fe82 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000d4a:	2048      	movs	r0, #72	; 0x48
 8000d4c:	f7ff fe7f 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f7ff fe7c 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f7ff fe79 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000d5c:	200c      	movs	r0, #12
 8000d5e:	f7ff fe76 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d62:	2031      	movs	r0, #49	; 0x31
 8000d64:	f7ff fe73 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000d68:	2036      	movs	r0, #54	; 0x36
 8000d6a:	f7ff fe70 	bl	8000a4e <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff fe6d 	bl	8000a4e <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000d74:	2011      	movs	r0, #17
 8000d76:	f7ff fe5b 	bl	8000a30 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000d7a:	2064      	movs	r0, #100	; 0x64
 8000d7c:	f001 f9b4 	bl	80020e8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000d80:	2029      	movs	r0, #41	; 0x29
 8000d82:	f7ff fe55 	bl	8000a30 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f802 	bl	8000d90 <ILI9341_SetRotation>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000d9a:	2036      	movs	r0, #54	; 0x36
 8000d9c:	f7ff fe48 	bl	8000a30 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f001 f9a1 	bl	80020e8 <HAL_Delay>

	switch(rotation)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d837      	bhi.n	8000e1c <ILI9341_SetRotation+0x8c>
 8000dac:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <ILI9341_SetRotation+0x24>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000dc5 	.word	0x08000dc5
 8000db8:	08000ddb 	.word	0x08000ddb
 8000dbc:	08000df1 	.word	0x08000df1
 8000dc0:	08000e07 	.word	0x08000e07
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000dc4:	2048      	movs	r0, #72	; 0x48
 8000dc6:	f7ff fe42 	bl	8000a4e <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <ILI9341_SetRotation+0x98>)
 8000dcc:	22f0      	movs	r2, #240	; 0xf0
 8000dce:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <ILI9341_SetRotation+0x9c>)
 8000dd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dd6:	801a      	strh	r2, [r3, #0]
		break;
 8000dd8:	e021      	b.n	8000e1e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000dda:	2028      	movs	r0, #40	; 0x28
 8000ddc:	f7ff fe37 	bl	8000a4e <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <ILI9341_SetRotation+0x98>)
 8000de2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000de6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <ILI9341_SetRotation+0x9c>)
 8000dea:	22f0      	movs	r2, #240	; 0xf0
 8000dec:	801a      	strh	r2, [r3, #0]
		break;
 8000dee:	e016      	b.n	8000e1e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000df0:	2088      	movs	r0, #136	; 0x88
 8000df2:	f7ff fe2c 	bl	8000a4e <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <ILI9341_SetRotation+0x98>)
 8000df8:	22f0      	movs	r2, #240	; 0xf0
 8000dfa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <ILI9341_SetRotation+0x9c>)
 8000dfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e02:	801a      	strh	r2, [r3, #0]
		break;
 8000e04:	e00b      	b.n	8000e1e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000e06:	20e8      	movs	r0, #232	; 0xe8
 8000e08:	f7ff fe21 	bl	8000a4e <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <ILI9341_SetRotation+0x98>)
 8000e0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e12:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <ILI9341_SetRotation+0x9c>)
 8000e16:	22f0      	movs	r2, #240	; 0xf0
 8000e18:	801a      	strh	r2, [r3, #0]
		break;
 8000e1a:	e000      	b.n	8000e1e <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000e1c:	bf00      	nop
	}
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000002 	.word	0x20000002
 8000e2c:	20000000 	.word	0x20000000

08000e30 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e34:	b08d      	sub	sp, #52	; 0x34
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	6039      	str	r1, [r7, #0]
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	466b      	mov	r3, sp
 8000e40:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e4e:	d202      	bcs.n	8000e56 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
 8000e54:	e002      	b.n	8000e5c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000e56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	ILI9341_WritePin(LCD_DC_PORT, LCD_DC_PIN,1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f240 1101 	movw	r1, #257	; 0x101
 8000e62:	483c      	ldr	r0, [pc, #240]	; (8000f54 <ILI9341_DrawColorBurst+0x124>)
 8000e64:	f000 fa04 	bl	8001270 <ILI9341_WritePin>
#ifdef USE_CS_PIN
	ILI9341_WritePin(LCD_CS_PORT, LCD_CS_PIN,0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4839      	ldr	r0, [pc, #228]	; (8000f54 <ILI9341_DrawColorBurst+0x124>)
 8000e6e:	f000 f9ff 	bl	8001270 <ILI9341_WritePin>
#endif

	uint8_t chifted = color>>8;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e7e:	460b      	mov	r3, r1
 8000e80:	3b01      	subs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	2300      	movs	r3, #0
 8000e86:	4688      	mov	r8, r1
 8000e88:	4699      	mov	r9, r3
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	00eb      	lsls	r3, r5, #3
 8000eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000eb2:	00e2      	lsls	r2, r4, #3
 8000eb4:	1dcb      	adds	r3, r1, #7
 8000eb6:	08db      	lsrs	r3, r3, #3
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	ebad 0d03 	sub.w	sp, sp, r3
 8000ebe:	466b      	mov	r3, sp
 8000ec0:	3300      	adds	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ec8:	e00e      	b.n	8000ee8 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	4413      	add	r3, r2
 8000ed0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ed4:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	3301      	adds	r3, #1
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	b2d1      	uxtb	r1, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d3ec      	bcc.n	8000eca <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f04:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f0a:	fb01 f202 	mul.w	r2, r1, r2
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d010      	beq.n	8000f3a <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f1c:	e009      	b.n	8000f32 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	230a      	movs	r3, #10
 8000f24:	69b9      	ldr	r1, [r7, #24]
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <ILI9341_DrawColorBurst+0x128>)
 8000f28:	f004 fa92 	bl	8005450 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	3301      	adds	r3, #1
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3f1      	bcc.n	8000f1e <ILI9341_DrawColorBurst+0xee>
		}
	}
	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	230a      	movs	r3, #10
 8000f40:	69b9      	ldr	r1, [r7, #24]
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <ILI9341_DrawColorBurst+0x128>)
 8000f44:	f004 fa84 	bl	8005450 <HAL_SPI_Transmit>
 8000f48:	46b5      	mov	sp, r6
}
 8000f4a:	bf00      	nop
 8000f4c:	3734      	adds	r7, #52	; 0x34
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	20000118 	.word	0x20000118

08000f5c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <ILI9341_FillScreen+0x44>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <ILI9341_FillScreen+0x48>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fd8a 	bl	8000a8e <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <ILI9341_FillScreen+0x44>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <ILI9341_FillScreen+0x48>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff4c 	bl	8000e30 <ILI9341_DrawColorBurst>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000002 	.word	0x20000002
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	80bb      	strh	r3, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <ILI9341_DrawPixel+0xc4>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d24d      	bcs.n	8001062 <ILI9341_DrawPixel+0xba>
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <ILI9341_DrawPixel+0xc8>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	88ba      	ldrh	r2, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d247      	bcs.n	8001062 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	753b      	strb	r3, [r7, #20]
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	757b      	strb	r3, [r7, #21]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	121b      	asrs	r3, r3, #8
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	75bb      	strb	r3, [r7, #22]
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	743b      	strb	r3, [r7, #16]
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	747b      	strb	r3, [r7, #17]
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	121b      	asrs	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	74bb      	strb	r3, [r7, #18]
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	733b      	strb	r3, [r7, #12]
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800102a:	202a      	movs	r0, #42	; 0x2a
 800102c:	f7ff fd00 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2104      	movs	r1, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fd18 	bl	8000a6c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 800103c:	202b      	movs	r0, #43	; 0x2b
 800103e:	f7ff fcf7 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2104      	movs	r1, #4
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fd0f 	bl	8000a6c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800104e:	202c      	movs	r0, #44	; 0x2c
 8001050:	f7ff fcee 	bl	8000a30 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fd06 	bl	8000a6c <ILI9341_WriteBuffer>
 8001060:	e000      	b.n	8001064 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001062:	bf00      	nop
}
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000002 	.word	0x20000002
 8001070:	20000000 	.word	0x20000000

08001074 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4623      	mov	r3, r4
 8001084:	80fb      	strh	r3, [r7, #6]
 8001086:	4603      	mov	r3, r0
 8001088:	80bb      	strh	r3, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
 800108e:	4613      	mov	r3, r2
 8001090:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <ILI9341_DrawRectangle+0xb0>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	429a      	cmp	r2, r3
 800109c:	d23d      	bcs.n	800111a <ILI9341_DrawRectangle+0xa6>
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <ILI9341_DrawRectangle+0xb4>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	88ba      	ldrh	r2, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d237      	bcs.n	800111a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <ILI9341_DrawRectangle+0xb0>)
 80010b2:	8812      	ldrh	r2, [r2, #0]
 80010b4:	b292      	uxth	r2, r2
 80010b6:	4293      	cmp	r3, r2
 80010b8:	dd05      	ble.n	80010c6 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <ILI9341_DrawRectangle+0xb0>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80010c6:	88ba      	ldrh	r2, [r7, #4]
 80010c8:	883b      	ldrh	r3, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <ILI9341_DrawRectangle+0xb4>)
 80010ce:	8812      	ldrh	r2, [r2, #0]
 80010d0:	b292      	uxth	r2, r2
 80010d2:	4293      	cmp	r3, r2
 80010d4:	dd05      	ble.n	80010e2 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <ILI9341_DrawRectangle+0xb4>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80010e2:	88fa      	ldrh	r2, [r7, #6]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b29c      	uxth	r4, r3
 80010ee:	88ba      	ldrh	r2, [r7, #4]
 80010f0:	883b      	ldrh	r3, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	88b9      	ldrh	r1, [r7, #4]
 80010fc:	88f8      	ldrh	r0, [r7, #6]
 80010fe:	4622      	mov	r2, r4
 8001100:	f7ff fcc5 	bl	8000a8e <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001104:	883b      	ldrh	r3, [r7, #0]
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	461a      	mov	r2, r3
 800110e:	8b3b      	ldrh	r3, [r7, #24]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe8c 	bl	8000e30 <ILI9341_DrawColorBurst>
 8001118:	e000      	b.n	800111c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800111a:	bf00      	nop
}
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	20000002 	.word	0x20000002
 8001128:	20000000 	.word	0x20000000

0800112c <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4623      	mov	r3, r4
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	4603      	mov	r3, r0
 8001140:	80bb      	strh	r3, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
 8001146:	4613      	mov	r3, r2
 8001148:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <ILI9341_DrawHLine+0x80>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	429a      	cmp	r2, r3
 8001154:	d225      	bcs.n	80011a2 <ILI9341_DrawHLine+0x76>
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <ILI9341_DrawHLine+0x84>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	88ba      	ldrh	r2, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d21f      	bcs.n	80011a2 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001162:	88fa      	ldrh	r2, [r7, #6]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	4413      	add	r3, r2
 8001168:	4a10      	ldr	r2, [pc, #64]	; (80011ac <ILI9341_DrawHLine+0x80>)
 800116a:	8812      	ldrh	r2, [r2, #0]
 800116c:	b292      	uxth	r2, r2
 800116e:	4293      	cmp	r3, r2
 8001170:	dd05      	ble.n	800117e <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <ILI9341_DrawHLine+0x80>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	b29a      	uxth	r2, r3
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4413      	add	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	b29a      	uxth	r2, r3
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	88b9      	ldrh	r1, [r7, #4]
 800118e:	88f8      	ldrh	r0, [r7, #6]
 8001190:	f7ff fc7d 	bl	8000a8e <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe48 	bl	8000e30 <ILI9341_DrawColorBurst>
 80011a0:	e000      	b.n	80011a4 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011a2:	bf00      	nop
}
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000002 	.word	0x20000002
 80011b0:	20000000 	.word	0x20000000

080011b4 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
 80011ce:	4613      	mov	r3, r2
 80011d0:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <ILI9341_DrawVLine+0x80>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d225      	bcs.n	800122a <ILI9341_DrawVLine+0x76>
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <ILI9341_DrawVLine+0x84>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	88ba      	ldrh	r2, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d21f      	bcs.n	800122a <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80011ea:	88ba      	ldrh	r2, [r7, #4]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <ILI9341_DrawVLine+0x84>)
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	b292      	uxth	r2, r2
 80011f6:	4293      	cmp	r3, r2
 80011f8:	dd05      	ble.n	8001206 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <ILI9341_DrawVLine+0x84>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001206:	88ba      	ldrh	r2, [r7, #4]
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	4413      	add	r3, r2
 800120c:	b29b      	uxth	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	b29b      	uxth	r3, r3
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	88b9      	ldrh	r1, [r7, #4]
 8001216:	88f8      	ldrh	r0, [r7, #6]
 8001218:	f7ff fc39 	bl	8000a8e <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe04 	bl	8000e30 <ILI9341_DrawColorBurst>
 8001228:	e000      	b.n	800122c <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800122a:	bf00      	nop
}
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bd90      	pop	{r4, r7, pc}
 8001232:	bf00      	nop
 8001234:	20000002 	.word	0x20000002
 8001238:	20000000 	.word	0x20000000

0800123c <LL_digitalWrite>:

void LL_digitalWrite(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t state){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
	// Function to easily write GPIO outputs with LL Driver
	if(state){
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <LL_digitalWrite+0x22>
		LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin);
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	4619      	mov	r1, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fb79 	bl	800094e <LL_GPIO_SetOutputPin>
	}
	else{
		LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin);
	}
}
 800125c:	e004      	b.n	8001268 <LL_digitalWrite+0x2c>
		LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin);
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fb82 	bl	800096c <LL_GPIO_ResetOutputPin>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <ILI9341_WritePin>:

void ILI9341_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t state){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
	// Function to override the existing calls to HAL_GPIO_WritePin, to easily switch between
	// HAL and LL GPIO drivers
	#ifdef USE_LL_GPIO_DRIVERS
		LL_digitalWrite(GPIOx, GPIO_Pin, state);
 8001280:	787a      	ldrb	r2, [r7, #1]
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	4619      	mov	r1, r3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffd8 	bl	800123c <LL_digitalWrite>
	#else
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state);
	#endif
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <LL_GPIO_ResetOutputPin>:
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	615a      	str	r2, [r3, #20]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4013      	ands	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e8:	f000 fe9c 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ec:	f000 f820 	bl	8001330 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80012f0:	f000 fa2a 	bl	8001748 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f000 fa46 	bl	8001784 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012f8:	f000 f876 	bl	80013e8 <MX_ADC1_Init>
  MX_TIM4_Init();
 80012fc:	f000 f9a0 	bl	8001640 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001300:	f000 f918 	bl	8001534 <MX_SPI1_Init>
  MX_DMA_Init();
 8001304:	f000 fa20 	bl	8001748 <MX_DMA_Init>
  MX_I2C1_Init();
 8001308:	f000 f8e6 	bl	80014d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800130c:	f000 f948 	bl	80015a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001310:	f000 f9f0 	bl	80016f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//LCD_demo_OLD();
	  static int cycles = 0;
	  if(!cycles){
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <main+0x48>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1fb      	bne.n	8001314 <main+0x30>
		  new_LCD_demo();
 800131c:	f000 fad2 	bl	80018c4 <new_LCD_demo>
		  cycles++;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <main+0x48>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a01      	ldr	r2, [pc, #4]	; (800132c <main+0x48>)
 8001328:	6013      	str	r3, [r2, #0]
  {
 800132a:	e7f3      	b.n	8001314 <main+0x30>
 800132c:	2000028c 	.word	0x2000028c

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2228      	movs	r2, #40	; 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fb02 	bl	8006948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136e:	2301      	movs	r3, #1
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800137c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fb18 	bl	80049bc <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001392:	f000 fbcb 	bl	8001b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2102      	movs	r1, #2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fd84 	bl	8004ec0 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013be:	f000 fbb5 	bl	8001b2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013c2:	2302      	movs	r3, #2
 80013c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 ff04 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013da:	f000 fba7 	bl	8001b2c <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <MX_ADC1_Init+0xe8>)
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <MX_ADC1_Init+0xec>)
 80013fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001408:	2201      	movs	r2, #1
 800140a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_ADC1_Init+0xe8>)
 800140e:	2200      	movs	r2, #0
 8001410:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001414:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <MX_ADC1_Init+0xe8>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001422:	2205      	movs	r2, #5
 8001424:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001426:	482a      	ldr	r0, [pc, #168]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001428:	f000 fe82 	bl	8002130 <HAL_ADC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001432:	f000 fb7b 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800143a:	2301      	movs	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800143e:	2301      	movs	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4822      	ldr	r0, [pc, #136]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001448:	f000 ff4a 	bl	80022e0 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fb6b 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800145a:	2302      	movs	r3, #2
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001464:	f000 ff3c 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800146e:	f000 fb5d 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001472:	2302      	movs	r3, #2
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001476:	2303      	movs	r3, #3
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_ADC1_Init+0xe8>)
 8001480:	f000 ff2e 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800148a:	f000 fb4f 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800148e:	2303      	movs	r3, #3
 8001490:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001492:	2304      	movs	r3, #4
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_ADC1_Init+0xe8>)
 800149c:	f000 ff20 	bl	80022e0 <HAL_ADC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80014a6:	f000 fb41 	bl	8001b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014aa:	2304      	movs	r3, #4
 80014ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80014ae:	2305      	movs	r3, #5
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_ADC1_Init+0xe8>)
 80014b8:	f000 ff12 	bl	80022e0 <HAL_ADC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014c2:	f000 fb33 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000094 	.word	0x20000094
 80014d4:	40012400 	.word	0x40012400

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C1_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <MX_I2C1_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_I2C1_Init+0x50>)
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_I2C1_Init+0x58>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_I2C1_Init+0x50>)
 80014f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_I2C1_Init+0x50>)
 8001516:	f001 fd21 	bl	8002f5c <HAL_I2C_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001520:	f000 fb04 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000c4 	.word	0x200000c4
 800152c:	40005400 	.word	0x40005400
 8001530:	000186a0 	.word	0x000186a0

08001534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_SPI1_Init+0x64>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <MX_SPI1_Init+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_SPI1_Init+0x64>)
 8001540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_SPI1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_SPI1_Init+0x64>)
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_SPI1_Init+0x64>)
 8001568:	2208      	movs	r2, #8
 800156a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_SPI1_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <MX_SPI1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_SPI1_Init+0x64>)
 8001580:	220a      	movs	r2, #10
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_SPI1_Init+0x64>)
 8001586:	f003 fedf 	bl	8005348 <HAL_SPI_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001590:	f000 facc 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000118 	.word	0x20000118
 800159c:	40013000 	.word	0x40013000

080015a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM1_Init+0x98>)
 80015be:	4a1f      	ldr	r2, [pc, #124]	; (800163c <MX_TIM1_Init+0x9c>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = WIRE_SPEED_COUNTER_TIMER_PRESCALER;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_TIM1_Init+0x98>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_TIM1_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = WIRE_SPEED_COUNTER_TIMER_ARR;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM1_Init+0x98>)
 80015d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80015d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_TIM1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_TIM1_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_TIM1_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_TIM1_Init+0x98>)
 80015ea:	f004 fa74 	bl	8005ad6 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015f4:	f000 fa9a 	bl	8001b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <MX_TIM1_Init+0x98>)
 8001606:	f004 fbc7 	bl	8005d98 <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001610:	f000 fa8c 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_TIM1_Init+0x98>)
 8001622:	f004 ff0d 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800162c:	f000 fa7e 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001b4 	.word	0x200001b4
 800163c:	40012c00 	.word	0x40012c00

08001640 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_TIM4_Init+0xac>)
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <MX_TIM4_Init+0xb0>)
 8001666:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = PWM_TIMER_PRESCALER;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MX_TIM4_Init+0xac>)
 800166a:	2201      	movs	r2, #1
 800166c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_TIM4_Init+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_AUTORELOAD_REG_ARR;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_TIM4_Init+0xac>)
 8001676:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800167a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM4_Init+0xac>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM4_Init+0xac>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM4_Init+0xac>)
 800168a:	f004 fa73 	bl	8005b74 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001694:	f000 fa4a 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	4619      	mov	r1, r3
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <MX_TIM4_Init+0xac>)
 80016a8:	f004 feca 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80016b2:	f000 fa3b 	bl	8001b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2208      	movs	r2, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM4_Init+0xac>)
 80016ce:	f004 faa1 	bl	8005c14 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016d8:	f000 fa28 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM4_Init+0xac>)
 80016de:	f000 fb83 	bl	8001de8 <HAL_TIM_MspPostInit>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001fc 	.word	0x200001fc
 80016f0:	40000800 	.word	0x40000800

080016f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_USART1_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800171a:	2208      	movs	r2, #8
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800172c:	f004 fee6 	bl	80064fc <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f000 f9f9 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000244 	.word	0x20000244
 8001744:	40013800 	.word	0x40013800

08001748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_DMA_Init+0x38>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <MX_DMA_Init+0x38>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6153      	str	r3, [r2, #20]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_DMA_Init+0x38>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	200d      	movs	r0, #13
 800176c:	f000 ffc9 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001770:	200d      	movs	r0, #13
 8001772:	f000 ffe2 	bl	800273a <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001798:	2010      	movs	r0, #16
 800179a:	f7ff fd8b 	bl	80012b4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800179e:	2020      	movs	r0, #32
 80017a0:	f7ff fd88 	bl	80012b4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017a4:	2004      	movs	r0, #4
 80017a6:	f7ff fd85 	bl	80012b4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80017aa:	2008      	movs	r0, #8
 80017ac:	f7ff fd82 	bl	80012b4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, TFT_DC_Pin|TFT_RESET_Pin|TFT_CS_Pin|ACTIVATE_ARC_OUT_Pin
 80017b0:	493a      	ldr	r1, [pc, #232]	; (800189c <MX_GPIO_Init+0x118>)
 80017b2:	483b      	ldr	r0, [pc, #236]	; (80018a0 <MX_GPIO_Init+0x11c>)
 80017b4:	f7ff fd6e 	bl	8001294 <LL_GPIO_ResetOutputPin>
                          |GAS_SOLENOID_OUT_Pin|EEPROM_WRITE_ENABLE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, DEBUG_OUT_Pin|DC_MOTOR_RELAY_OUT_Pin);
 80017b8:	493a      	ldr	r1, [pc, #232]	; (80018a4 <MX_GPIO_Init+0x120>)
 80017ba:	483b      	ldr	r0, [pc, #236]	; (80018a8 <MX_GPIO_Init+0x124>)
 80017bc:	f7ff fd6a 	bl	8001294 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = OPT_SELECT_PUSH_BUTTON_Pin;
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <MX_GPIO_Init+0x128>)
 80017c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017c4:	2308      	movs	r3, #8
 80017c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OPT_SELECT_PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4837      	ldr	r0, [pc, #220]	; (80018b0 <MX_GPIO_Init+0x12c>)
 80017d2:	f005 f829 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MIG_BUTTON_IN_Pin|OPT_SELECTOR_2T_Pin|PID_DIP_SW_BIT2_Pin;
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <MX_GPIO_Init+0x130>)
 80017d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017da:	2308      	movs	r3, #8
 80017dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4830      	ldr	r0, [pc, #192]	; (80018a8 <MX_GPIO_Init+0x124>)
 80017e8:	f005 f81e 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 80017ec:	f240 1301 	movw	r3, #257	; 0x101
 80017f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017f2:	2301      	movs	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4827      	ldr	r0, [pc, #156]	; (80018a0 <MX_GPIO_Init+0x11c>)
 8001804:	f005 f810 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TFT_RESET_Pin|ACTIVATE_ARC_OUT_Pin|GAS_SOLENOID_OUT_Pin;
 8001808:	f641 231a 	movw	r3, #6682	; 0x1a1a
 800180c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800180e:	2301      	movs	r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	481f      	ldr	r0, [pc, #124]	; (80018a0 <MX_GPIO_Init+0x11c>)
 8001824:	f005 f800 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TFT_CS_Pin|EEPROM_WRITE_ENABLE_Pin;
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_GPIO_Init+0x134>)
 800182a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800182c:	2301      	movs	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4817      	ldr	r0, [pc, #92]	; (80018a0 <MX_GPIO_Init+0x11c>)
 8001842:	f004 fff1 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OPTO_IN_Pin|PID_DIP_SW_BIT1_Pin|OPT_SELECTOR_WIRE_TEST_Pin|OPT_SELECTOR_GAS_TEST_Pin
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_GPIO_Init+0x138>)
 8001848:	607b      	str	r3, [r7, #4]
                          |OPT_SELECTOR_4T_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800184a:	2308      	movs	r3, #8
 800184c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <MX_GPIO_Init+0x11c>)
 8001858:	f004 ffe6 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DEBUG_OUT_Pin;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_GPIO_Init+0x13c>)
 800185e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001860:	2301      	movs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001864:	2302      	movs	r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(DEBUG_OUT_GPIO_Port, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_GPIO_Init+0x124>)
 8001872:	f004 ffd9 	bl	8006828 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_MOTOR_RELAY_OUT_Pin;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <MX_GPIO_Init+0x128>)
 8001878:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800187a:	2301      	movs	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_MOTOR_RELAY_OUT_GPIO_Port, &GPIO_InitStruct);
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <MX_GPIO_Init+0x124>)
 8001890:	f004 ffca 	bl	8006828 <LL_GPIO_Init>

}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	04043b3f 	.word	0x04043b3f
 80018a0:	40010c00 	.word	0x40010c00
 80018a4:	04880088 	.word	0x04880088
 80018a8:	40010800 	.word	0x40010800
 80018ac:	04800080 	.word	0x04800080
 80018b0:	40011000 	.word	0x40011000
 80018b4:	04114051 	.word	0x04114051
 80018b8:	04042024 	.word	0x04042024
 80018bc:	04f800f8 	.word	0x04f800f8
 80018c0:	04080008 	.word	0x04080008

080018c4 <new_LCD_demo>:

/* USER CODE BEGIN 4 */

void new_LCD_demo(void){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af02      	add	r7, sp, #8
	   //debug_blink(3);
	   ILI9341_Init();
 80018ca:	f7ff f957 	bl	8000b7c <ILI9341_Init>

	   // Simple Text writing (Text, Font, X, Y, Color, BackColor)
	   // Available Fonts are FONT1, FONT2, FONT3 and FONT4
	   ILI9341_FillScreen(BLACK);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fb44 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fa5b 	bl	8000d90 <ILI9341_SetRotation>
	   ILI9341_DrawText("MIDI BUSSBARS ORGAN", FONT4, 10, 20, BLACK, GREEN);
 80018da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2300      	movs	r3, #0
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2314      	movs	r3, #20
 80018e6:	220a      	movs	r2, #10
 80018e8:	4989      	ldr	r1, [pc, #548]	; (8001b10 <new_LCD_demo+0x24c>)
 80018ea:	488a      	ldr	r0, [pc, #552]	; (8001b14 <new_LCD_demo+0x250>)
 80018ec:	f7fe ffe6 	bl	80008bc <ILI9341_DrawText>
	   ILI9341_DrawText("TFT DEBUG", FONT4, 10, 60, BLACK, GREEN);
 80018f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2300      	movs	r3, #0
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	233c      	movs	r3, #60	; 0x3c
 80018fc:	220a      	movs	r2, #10
 80018fe:	4984      	ldr	r1, [pc, #528]	; (8001b10 <new_LCD_demo+0x24c>)
 8001900:	4885      	ldr	r0, [pc, #532]	; (8001b18 <new_LCD_demo+0x254>)
 8001902:	f7fe ffdb 	bl	80008bc <ILI9341_DrawText>

	   // LCD TEST SCREENS

	   ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	236e      	movs	r3, #110	; 0x6e
 8001912:	225a      	movs	r2, #90	; 0x5a
 8001914:	497e      	ldr	r1, [pc, #504]	; (8001b10 <new_LCD_demo+0x24c>)
 8001916:	4881      	ldr	r0, [pc, #516]	; (8001b1c <new_LCD_demo+0x258>)
 8001918:	f7fe ffd0 	bl	80008bc <ILI9341_DrawText>
	   HAL_Delay(1000);
 800191c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001920:	f000 fbe2 	bl	80020e8 <HAL_Delay>

	   //debug_blink(5);

	   //Writing numbers
	   ILI9341_FillScreen(WHITE);
 8001924:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001928:	f7ff fb18 	bl	8000f5c <ILI9341_FillScreen>
	   static char BufferText[30];
	   for(uint8_t i = 0; i <= 5; i++)
 800192c:	2300      	movs	r3, #0
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	e07b      	b.n	8001a2a <new_LCD_demo+0x166>
	   {
	     sprintf(BufferText, "COUNT : %d", i);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	461a      	mov	r2, r3
 8001936:	497a      	ldr	r1, [pc, #488]	; (8001b20 <new_LCD_demo+0x25c>)
 8001938:	487a      	ldr	r0, [pc, #488]	; (8001b24 <new_LCD_demo+0x260>)
 800193a:	f005 f80d 	bl	8006958 <siprintf>
	     ILI9341_DrawText(BufferText, FONT3, 10, 10, BLACK, WHITE);
 800193e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	230a      	movs	r3, #10
 800194a:	220a      	movs	r2, #10
 800194c:	4976      	ldr	r1, [pc, #472]	; (8001b28 <new_LCD_demo+0x264>)
 800194e:	4875      	ldr	r0, [pc, #468]	; (8001b24 <new_LCD_demo+0x260>)
 8001950:	f7fe ffb4 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 30, BLUE, WHITE);
 8001954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	231f      	movs	r3, #31
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	231e      	movs	r3, #30
 8001960:	220a      	movs	r2, #10
 8001962:	4971      	ldr	r1, [pc, #452]	; (8001b28 <new_LCD_demo+0x264>)
 8001964:	486f      	ldr	r0, [pc, #444]	; (8001b24 <new_LCD_demo+0x260>)
 8001966:	f7fe ffa9 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 50, RED, WHITE);
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2332      	movs	r3, #50	; 0x32
 8001978:	220a      	movs	r2, #10
 800197a:	496b      	ldr	r1, [pc, #428]	; (8001b28 <new_LCD_demo+0x264>)
 800197c:	4869      	ldr	r0, [pc, #420]	; (8001b24 <new_LCD_demo+0x260>)
 800197e:	f7fe ff9d 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 70, GREEN, WHITE);
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2346      	movs	r3, #70	; 0x46
 8001990:	220a      	movs	r2, #10
 8001992:	4965      	ldr	r1, [pc, #404]	; (8001b28 <new_LCD_demo+0x264>)
 8001994:	4863      	ldr	r0, [pc, #396]	; (8001b24 <new_LCD_demo+0x260>)
 8001996:	f7fe ff91 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 90, YELLOW, WHITE);
 800199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	235a      	movs	r3, #90	; 0x5a
 80019a8:	220a      	movs	r2, #10
 80019aa:	495f      	ldr	r1, [pc, #380]	; (8001b28 <new_LCD_demo+0x264>)
 80019ac:	485d      	ldr	r0, [pc, #372]	; (8001b24 <new_LCD_demo+0x260>)
 80019ae:	f7fe ff85 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 110, PURPLE, WHITE);
 80019b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	f647 030f 	movw	r3, #30735	; 0x780f
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	236e      	movs	r3, #110	; 0x6e
 80019c0:	220a      	movs	r2, #10
 80019c2:	4959      	ldr	r1, [pc, #356]	; (8001b28 <new_LCD_demo+0x264>)
 80019c4:	4857      	ldr	r0, [pc, #348]	; (8001b24 <new_LCD_demo+0x260>)
 80019c6:	f7fe ff79 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 130, ORANGE, WHITE);
 80019ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2382      	movs	r3, #130	; 0x82
 80019d8:	220a      	movs	r2, #10
 80019da:	4953      	ldr	r1, [pc, #332]	; (8001b28 <new_LCD_demo+0x264>)
 80019dc:	4851      	ldr	r0, [pc, #324]	; (8001b24 <new_LCD_demo+0x260>)
 80019de:	f7fe ff6d 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 150, MAROON, WHITE);
 80019e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2396      	movs	r3, #150	; 0x96
 80019f0:	220a      	movs	r2, #10
 80019f2:	494d      	ldr	r1, [pc, #308]	; (8001b28 <new_LCD_demo+0x264>)
 80019f4:	484b      	ldr	r0, [pc, #300]	; (8001b24 <new_LCD_demo+0x260>)
 80019f6:	f7fe ff61 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 170, WHITE, BLACK);
 80019fa:	2300      	movs	r3, #0
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	23aa      	movs	r3, #170	; 0xaa
 8001a06:	220a      	movs	r2, #10
 8001a08:	4947      	ldr	r1, [pc, #284]	; (8001b28 <new_LCD_demo+0x264>)
 8001a0a:	4846      	ldr	r0, [pc, #280]	; (8001b24 <new_LCD_demo+0x260>)
 8001a0c:	f7fe ff56 	bl	80008bc <ILI9341_DrawText>
	     ILI9341_DrawText(BufferText, FONT3, 10, 190, BLUE, BLACK);
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	231f      	movs	r3, #31
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	23be      	movs	r3, #190	; 0xbe
 8001a1a:	220a      	movs	r2, #10
 8001a1c:	4942      	ldr	r1, [pc, #264]	; (8001b28 <new_LCD_demo+0x264>)
 8001a1e:	4841      	ldr	r0, [pc, #260]	; (8001b24 <new_LCD_demo+0x260>)
 8001a20:	f7fe ff4c 	bl	80008bc <ILI9341_DrawText>
	   for(uint8_t i = 0; i <= 5; i++)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	3301      	adds	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d980      	bls.n	8001932 <new_LCD_demo+0x6e>
	   }

	   // Horizontal Line (X, Y, Length, Color)
	   ILI9341_FillScreen(WHITE);
 8001a30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a34:	f7ff fa92 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawHLine(50, 120, 200, NAVY);
 8001a38:	230f      	movs	r3, #15
 8001a3a:	22c8      	movs	r2, #200	; 0xc8
 8001a3c:	2178      	movs	r1, #120	; 0x78
 8001a3e:	2032      	movs	r0, #50	; 0x32
 8001a40:	f7ff fb74 	bl	800112c <ILI9341_DrawHLine>
	   HAL_Delay(1000);
 8001a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a48:	f000 fb4e 	bl	80020e8 <HAL_Delay>

	   // Vertical Line (X, Y, Length, Color)
	   ILI9341_FillScreen(WHITE);
 8001a4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a50:	f7ff fa84 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawVLine(160, 40, 150, DARKGREEN);
 8001a54:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001a58:	2296      	movs	r2, #150	; 0x96
 8001a5a:	2128      	movs	r1, #40	; 0x28
 8001a5c:	20a0      	movs	r0, #160	; 0xa0
 8001a5e:	f7ff fba9 	bl	80011b4 <ILI9341_DrawVLine>
	   HAL_Delay(1000);
 8001a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a66:	f000 fb3f 	bl	80020e8 <HAL_Delay>

	   // Hollow Circle (Centre X, Centre Y, Radius, Color)
	   ILI9341_FillScreen(WHITE);
 8001a6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a6e:	f7ff fa75 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawHollowCircle(160, 120, 80, PINK);
 8001a72:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001a76:	2250      	movs	r2, #80	; 0x50
 8001a78:	2178      	movs	r1, #120	; 0x78
 8001a7a:	20a0      	movs	r0, #160	; 0xa0
 8001a7c:	f7fe fcea 	bl	8000454 <ILI9341_DrawHollowCircle>
	   HAL_Delay(1000);
 8001a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a84:	f000 fb30 	bl	80020e8 <HAL_Delay>

	   // Filled Circle (Centre X, Centre Y, Radius, Color)
	   ILI9341_FillScreen(WHITE);
 8001a88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a8c:	f7ff fa66 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawFilledCircle(160, 120, 50, CYAN);
 8001a90:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a94:	2232      	movs	r2, #50	; 0x32
 8001a96:	2178      	movs	r1, #120	; 0x78
 8001a98:	20a0      	movs	r0, #160	; 0xa0
 8001a9a:	f7fe fd91 	bl	80005c0 <ILI9341_DrawFilledCircle>
	   HAL_Delay(1000);
 8001a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa2:	f000 fb21 	bl	80020e8 <HAL_Delay>

	   // Filled Rectangle (Start X, Start Y, Length X, Length Y)
	   ILI9341_FillScreen(WHITE);
 8001aa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aaa:	f7ff fa57 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawRectangle(50, 50, 220, 140, GREENYELLOW);
 8001aae:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	238c      	movs	r3, #140	; 0x8c
 8001ab6:	22dc      	movs	r2, #220	; 0xdc
 8001ab8:	2132      	movs	r1, #50	; 0x32
 8001aba:	2032      	movs	r0, #50	; 0x32
 8001abc:	f7ff fada 	bl	8001074 <ILI9341_DrawRectangle>
	   HAL_Delay(1000);
 8001ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac4:	f000 fb10 	bl	80020e8 <HAL_Delay>

	   // Hollow Rectangle (Start X, Start Y, End X, End Y)
	   ILI9341_FillScreen(WHITE);
 8001ac8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001acc:	f7ff fa46 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawHollowRectangleCoord(50, 50, 270, 190, DARKCYAN);
 8001ad0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	23be      	movs	r3, #190	; 0xbe
 8001ad8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001adc:	2132      	movs	r1, #50	; 0x32
 8001ade:	2032      	movs	r0, #50	; 0x32
 8001ae0:	f7fe fdf6 	bl	80006d0 <ILI9341_DrawHollowRectangleCoord>
	   HAL_Delay(1000);
 8001ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae8:	f000 fafe 	bl	80020e8 <HAL_Delay>

	   // Simple Pixel Only (X, Y, Color)
	   ILI9341_FillScreen(WHITE);
 8001aec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001af0:	f7ff fa34 	bl	8000f5c <ILI9341_FillScreen>
	   ILI9341_DrawPixel(100, 100, BLACK);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2164      	movs	r1, #100	; 0x64
 8001af8:	2064      	movs	r0, #100	; 0x64
 8001afa:	f7ff fa55 	bl	8000fa8 <ILI9341_DrawPixel>
	   HAL_Delay(1000);
 8001afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b02:	f000 faf1 	bl	80020e8 <HAL_Delay>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	08007c00 	.word	0x08007c00
 8001b14:	08007264 	.word	0x08007264
 8001b18:	08007278 	.word	0x08007278
 8001b1c:	08007284 	.word	0x08007284
 8001b20:	08007290 	.word	0x08007290
 8001b24:	20000290 	.word	0x20000290
 8001b28:	0800729c 	.word	0x0800729c

08001b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
}
 8001b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <Error_Handler+0x8>
	...

08001b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_MspInit+0x5c>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_MspInit+0x60>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_MspInit+0x60>)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000

08001b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_ADC_MspInit+0x6c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d121      	bne.n	8001c00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <HAL_ADC_MspInit+0x70>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_ADC_MspInit+0x70>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_ADC_MspInit+0x70>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_ADC_MspInit+0x70>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_ADC_MspInit+0x70>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_ADC_MspInit+0x70>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bec:	231f      	movs	r3, #31
 8001bee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_ADC_MspInit+0x74>)
 8001bfc:	f001 f82a 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40012400 	.word	0x40012400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010800 	.word	0x40010800

08001c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_I2C_MspInit+0x80>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d12b      	bne.n	8001c8c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2C_MspInit+0x84>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x84>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_I2C_MspInit+0x84>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	2312      	movs	r3, #18
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480f      	ldr	r0, [pc, #60]	; (8001c9c <HAL_I2C_MspInit+0x88>)
 8001c60:	f000 fff8 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_I2C_MspInit+0x84>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_I2C_MspInit+0x84>)
 8001c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6e:	61d3      	str	r3, [r2, #28]
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0x84>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	201f      	movs	r0, #31
 8001c82:	f000 fd3e 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c86:	201f      	movs	r0, #31
 8001c88:	f000 fd57 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40005400 	.word	0x40005400
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010c00 	.word	0x40010c00

08001ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <HAL_SPI_MspInit+0xbc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d149      	bne.n	8001d54 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001cc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_SPI_MspInit+0xc0>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cf0:	23a0      	movs	r3, #160	; 0xa0
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4619      	mov	r1, r3
 8001d02:	4818      	ldr	r0, [pc, #96]	; (8001d64 <HAL_SPI_MspInit+0xc4>)
 8001d04:	f000 ffa6 	bl	8002c54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d0a:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_SPI_MspInit+0xcc>)
 8001d0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d10:	2210      	movs	r2, #16
 8001d12:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d3a:	f000 fd19 	bl	8002770 <HAL_DMA_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001d44:	f7ff fef2 	bl	8001b2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d4c:	649a      	str	r2, [r3, #72]	; 0x48
 8001d4e:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40013000 	.word	0x40013000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	20000170 	.word	0x20000170
 8001d6c:	40020030 	.word	0x40020030

08001d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_TIM_Base_MspInit+0x34>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10b      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_TIM_Base_MspInit+0x38>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_TIM_Base_MspInit+0x38>)
 8001d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_TIM_Base_MspInit+0x38>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_TIM_PWM_MspInit+0x38>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_TIM_MspPostInit+0x5c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d118      	bne.n	8001e3a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_TIM_MspPostInit+0x60>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_TIM_MspPostInit+0x60>)
 8001e0e:	f043 0308 	orr.w	r3, r3, #8
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_TIM_MspPostInit+0x60>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <HAL_TIM_MspPostInit+0x64>)
 8001e36:	f000 ff0d 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40000800 	.word	0x40000800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40010c00 	.word	0x40010c00

08001e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_UART_MspInit+0x8c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d131      	bne.n	8001ed4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <HAL_UART_MspInit+0x94>)
 8001eb6:	f000 fecd 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <HAL_UART_MspInit+0x94>)
 8001ed0:	f000 fec0 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010800 	.word	0x40010800

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2e:	f000 f8bf 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	//pulse_debug_out(1);
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <DMA1_Channel3_IRQHandler+0x10>)
 8001f3e:	f000 fd49 	bl	80029d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
   //pulse_debug_out(1);
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000170 	.word	0x20000170

08001f4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <I2C1_EV_IRQHandler+0x10>)
 8001f52:	f001 f95b 	bl	800320c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200000c4 	.word	0x200000c4

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f004 fcb0 	bl	80068f4 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20005000 	.word	0x20005000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	200002b0 	.word	0x200002b0
 8001fc8:	200002c8 	.word	0x200002c8

08001fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff fff8 	bl	8001fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ff4:	4c09      	ldr	r4, [pc, #36]	; (800201c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f004 fc7d 	bl	8006900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002006:	f7ff f96d 	bl	80012e4 <main>
  bx lr
 800200a:	4770      	bx	lr
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002014:	08008dac 	.word	0x08008dac
  ldr r2, =_sbss
 8002018:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800201c:	200002c8 	.word	0x200002c8

08002020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_2_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_Init+0x28>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_Init+0x28>)
 800202e:	f043 0310 	orr.w	r3, r3, #16
 8002032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 fb59 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fd7a 	bl	8001b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fb71 	bl	8002756 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 fb39 	bl	8002702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000010 	.word	0x20000010
 80020ac:	2000000c 	.word	0x2000000c

080020b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_IncTick+0x1c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_IncTick+0x20>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_IncTick+0x20>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000010 	.word	0x20000010
 80020d0:	200002b4 	.word	0x200002b4

080020d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <HAL_GetTick+0x10>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	200002b4 	.word	0x200002b4

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_Delay+0x44>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffe0 	bl	80020d4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000010 	.word	0x20000010

08002130 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0be      	b.n	80022d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fd14 	bl	8001b9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f9ab 	bl	80024d0 <ADC_ConversionStop_Disable>
 800217a:	4603      	mov	r3, r0
 800217c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8099 	bne.w	80022be <HAL_ADC_Init+0x18e>
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 8095 	bne.w	80022be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800219c:	f023 0302 	bic.w	r3, r3, #2
 80021a0:	f043 0202 	orr.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7b1b      	ldrb	r3, [r3, #12]
 80021b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c8:	d003      	beq.n	80021d2 <HAL_ADC_Init+0xa2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d102      	bne.n	80021d8 <HAL_ADC_Init+0xa8>
 80021d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d6:	e000      	b.n	80021da <HAL_ADC_Init+0xaa>
 80021d8:	2300      	movs	r3, #0
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7d1b      	ldrb	r3, [r3, #20]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d119      	bne.n	800221c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7b1b      	ldrb	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	035a      	lsls	r2, r3, #13
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e00b      	b.n	800221c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_ADC_Init+0x1a8>)
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	430b      	orrs	r3, r1
 8002242:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800224c:	d003      	beq.n	8002256 <HAL_ADC_Init+0x126>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d104      	bne.n	8002260 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	3b01      	subs	r3, #1
 800225c:	051b      	lsls	r3, r3, #20
 800225e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	430a      	orrs	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_ADC_Init+0x1ac>)
 800227c:	4013      	ands	r3, r2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	d10b      	bne.n	800229c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800229a:	e018      	b.n	80022ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	f023 0312 	bic.w	r3, r3, #18
 80022a4:	f043 0210 	orr.w	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022bc:	e007      	b.n	80022ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f043 0210 	orr.w	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	ffe1f7fd 	.word	0xffe1f7fd
 80022dc:	ff1f0efe 	.word	0xff1f0efe

080022e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x20>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0dc      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1da>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d81c      	bhi.n	800234a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b05      	subs	r3, #5
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	4019      	ands	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b05      	subs	r3, #5
 800233c:	fa00 f203 	lsl.w	r2, r0, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	635a      	str	r2, [r3, #52]	; 0x34
 8002348:	e03c      	b.n	80023c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d81c      	bhi.n	800238c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	3b23      	subs	r3, #35	; 0x23
 8002364:	221f      	movs	r2, #31
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	4019      	ands	r1, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	3b23      	subs	r3, #35	; 0x23
 800237e:	fa00 f203 	lsl.w	r2, r0, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
 800238a:	e01b      	b.n	80023c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b41      	subs	r3, #65	; 0x41
 800239e:	221f      	movs	r2, #31
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4019      	ands	r1, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b41      	subs	r3, #65	; 0x41
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d91c      	bls.n	8002406 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	3b1e      	subs	r3, #30
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6898      	ldr	r0, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	3b1e      	subs	r3, #30
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	e019      	b.n	800243a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6919      	ldr	r1, [r3, #16]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	2207      	movs	r2, #7
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4019      	ands	r1, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6898      	ldr	r0, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	fa00 f203 	lsl.w	r2, r0, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b10      	cmp	r3, #16
 8002440:	d003      	beq.n	800244a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002446:	2b11      	cmp	r3, #17
 8002448:	d132      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d125      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d126      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002470:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d11a      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <HAL_ADC_ConfigChannel+0x1ec>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	0c9a      	lsrs	r2, r3, #18
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002490:	e002      	b.n	8002498 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3b01      	subs	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f9      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x1b2>
 800249e:	e007      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40012400 	.word	0x40012400
 80024c8:	20000008 	.word	0x20000008
 80024cc:	431bde83 	.word	0x431bde83

080024d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d12e      	bne.n	8002548 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024fa:	f7ff fdeb 	bl	80020d4 <HAL_GetTick>
 80024fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002500:	e01b      	b.n	800253a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002502:	f7ff fde7 	bl	80020d4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d914      	bls.n	800253a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f043 0210 	orr.w	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d0dc      	beq.n	8002502 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4906      	ldr	r1, [pc, #24]	; (80025ec <__NVIC_EnableIRQ+0x34>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f7ff ff90 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff2d 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002714:	f7ff ff42 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff90 	bl	8002644 <NVIC_EncodePriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5f 	bl	80025f0 <__NVIC_SetPriority>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff35 	bl	80025b8 <__NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffa2 	bl	80026a8 <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e043      	b.n	800280e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_DMA_Init+0xa8>)
 800278e:	4413      	add	r3, r2
 8002790:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_DMA_Init+0xac>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_DMA_Init+0xb0>)
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	bffdfff8 	.word	0xbffdfff8
 800281c:	cccccccd 	.word	0xcccccccd
 8002820:	40020000 	.word	0x40020000

08002824 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Start_IT+0x20>
 8002840:	2302      	movs	r3, #2
 8002842:	e04b      	b.n	80028dc <HAL_DMA_Start_IT+0xb8>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d13a      	bne.n	80028ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f9bc 	bl	8002bfa <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 020e 	orr.w	r2, r2, #14
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00f      	b.n	80028bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 020a 	orr.w	r2, r2, #10
 80028ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e005      	b.n	80028da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d005      	beq.n	8002908 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2204      	movs	r2, #4
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e051      	b.n	80029ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 020e 	bic.w	r2, r2, #14
 8002916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_DMA_Abort_IT+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d029      	beq.n	8002986 <HAL_DMA_Abort_IT+0xa2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_DMA_Abort_IT+0xd8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_DMA_Abort_IT+0x9e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_DMA_Abort_IT+0xdc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01a      	beq.n	800297c <HAL_DMA_Abort_IT+0x98>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_DMA_Abort_IT+0xe0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d012      	beq.n	8002976 <HAL_DMA_Abort_IT+0x92>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_DMA_Abort_IT+0xe4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00a      	beq.n	8002970 <HAL_DMA_Abort_IT+0x8c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_DMA_Abort_IT+0xe8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <HAL_DMA_Abort_IT+0x86>
 8002964:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002968:	e00e      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 800296a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296e:	e00b      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002974:	e008      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297a:	e005      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 800297c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002980:	e002      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002982:	2310      	movs	r3, #16
 8002984:	e000      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002986:	2301      	movs	r3, #1
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_DMA_Abort_IT+0xec>)
 800298a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
    } 
  }
  return status;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020008 	.word	0x40020008
 80029bc:	4002001c 	.word	0x4002001c
 80029c0:	40020030 	.word	0x40020030
 80029c4:	40020044 	.word	0x40020044
 80029c8:	40020058 	.word	0x40020058
 80029cc:	4002006c 	.word	0x4002006c
 80029d0:	40020000 	.word	0x40020000

080029d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d04f      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xc8>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a66      	ldr	r2, [pc, #408]	; (8002bc4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d029      	beq.n	8002a82 <HAL_DMA_IRQHandler+0xae>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_DMA_IRQHandler+0x1f4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xaa>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_DMA_IRQHandler+0x1f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01a      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xa4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a62      	ldr	r2, [pc, #392]	; (8002bd0 <HAL_DMA_IRQHandler+0x1fc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d012      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x9e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_DMA_IRQHandler+0x200>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x98>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5f      	ldr	r2, [pc, #380]	; (8002bd8 <HAL_DMA_IRQHandler+0x204>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x92>
 8002a60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a64:	e00e      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a6a:	e00b      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a70:	e008      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a76:	e005      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7c:	e002      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	e000      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a82:	2304      	movs	r3, #4
 8002a84:	4a55      	ldr	r2, [pc, #340]	; (8002bdc <HAL_DMA_IRQHandler+0x208>)
 8002a86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8094 	beq.w	8002bba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a9a:	e08e      	b.n	8002bba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d056      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x186>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d051      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020a 	bic.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d029      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x166>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_DMA_IRQHandler+0x1f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x162>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <HAL_DMA_IRQHandler+0x1f8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x15c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d012      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x156>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_DMA_IRQHandler+0x200>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00a      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x150>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <HAL_DMA_IRQHandler+0x204>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x14a>
 8002b18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b1c:	e00e      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b22:	e00b      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b28:	e008      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b2e:	e005      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b34:	e002      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b36:	2320      	movs	r3, #32
 8002b38:	e000      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <HAL_DMA_IRQHandler+0x208>)
 8002b3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d034      	beq.n	8002bba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b58:	e02f      	b.n	8002bba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2208      	movs	r2, #8
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d028      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x1e8>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 020e 	bic.w	r2, r2, #14
 8002b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
    }
  }
  return;
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
}
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40020008 	.word	0x40020008
 8002bc8:	4002001c 	.word	0x4002001c
 8002bcc:	40020030 	.word	0x40020030
 8002bd0:	40020044 	.word	0x40020044
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	4002006c 	.word	0x4002006c
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bee:	b2db      	uxtb	r3, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d108      	bne.n	8002c3a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c38:	e007      	b.n	8002c4a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b08b      	sub	sp, #44	; 0x2c
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c66:	e169      	b.n	8002f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8158 	bne.w	8002f36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4a9a      	ldr	r2, [pc, #616]	; (8002ef4 <HAL_GPIO_Init+0x2a0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d05e      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002c90:	4a98      	ldr	r2, [pc, #608]	; (8002ef4 <HAL_GPIO_Init+0x2a0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d875      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002c96:	4a98      	ldr	r2, [pc, #608]	; (8002ef8 <HAL_GPIO_Init+0x2a4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d058      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002c9c:	4a96      	ldr	r2, [pc, #600]	; (8002ef8 <HAL_GPIO_Init+0x2a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d86f      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002ca2:	4a96      	ldr	r2, [pc, #600]	; (8002efc <HAL_GPIO_Init+0x2a8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d052      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002ca8:	4a94      	ldr	r2, [pc, #592]	; (8002efc <HAL_GPIO_Init+0x2a8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d869      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cae:	4a94      	ldr	r2, [pc, #592]	; (8002f00 <HAL_GPIO_Init+0x2ac>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04c      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002cb4:	4a92      	ldr	r2, [pc, #584]	; (8002f00 <HAL_GPIO_Init+0x2ac>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d863      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cba:	4a92      	ldr	r2, [pc, #584]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d046      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
 8002cc0:	4a90      	ldr	r2, [pc, #576]	; (8002f04 <HAL_GPIO_Init+0x2b0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d85d      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cc6:	2b12      	cmp	r3, #18
 8002cc8:	d82a      	bhi.n	8002d20 <HAL_GPIO_Init+0xcc>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d859      	bhi.n	8002d82 <HAL_GPIO_Init+0x12e>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <HAL_GPIO_Init+0x80>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002d4f 	.word	0x08002d4f
 8002cd8:	08002d29 	.word	0x08002d29
 8002cdc:	08002d3b 	.word	0x08002d3b
 8002ce0:	08002d7d 	.word	0x08002d7d
 8002ce4:	08002d83 	.word	0x08002d83
 8002ce8:	08002d83 	.word	0x08002d83
 8002cec:	08002d83 	.word	0x08002d83
 8002cf0:	08002d83 	.word	0x08002d83
 8002cf4:	08002d83 	.word	0x08002d83
 8002cf8:	08002d83 	.word	0x08002d83
 8002cfc:	08002d83 	.word	0x08002d83
 8002d00:	08002d83 	.word	0x08002d83
 8002d04:	08002d83 	.word	0x08002d83
 8002d08:	08002d83 	.word	0x08002d83
 8002d0c:	08002d83 	.word	0x08002d83
 8002d10:	08002d83 	.word	0x08002d83
 8002d14:	08002d83 	.word	0x08002d83
 8002d18:	08002d31 	.word	0x08002d31
 8002d1c:	08002d45 	.word	0x08002d45
 8002d20:	4a79      	ldr	r2, [pc, #484]	; (8002f08 <HAL_GPIO_Init+0x2b4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d26:	e02c      	b.n	8002d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e029      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	3304      	adds	r3, #4
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e024      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	623b      	str	r3, [r7, #32]
          break;
 8002d42:	e01f      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	623b      	str	r3, [r7, #32]
          break;
 8002d4c:	e01a      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d102      	bne.n	8002d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d56:	2304      	movs	r3, #4
 8002d58:	623b      	str	r3, [r7, #32]
          break;
 8002d5a:	e013      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d64:	2308      	movs	r3, #8
 8002d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	611a      	str	r2, [r3, #16]
          break;
 8002d6e:	e009      	b.n	8002d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d70:	2308      	movs	r3, #8
 8002d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	615a      	str	r2, [r3, #20]
          break;
 8002d7a:	e003      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
          break;
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x130>
          break;
 8002d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2bff      	cmp	r3, #255	; 0xff
 8002d88:	d801      	bhi.n	8002d8e <HAL_GPIO_Init+0x13a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	e001      	b.n	8002d92 <HAL_GPIO_Init+0x13e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d802      	bhi.n	8002da0 <HAL_GPIO_Init+0x14c>
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x152>
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	3b08      	subs	r3, #8
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	210f      	movs	r1, #15
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	6a39      	ldr	r1, [r7, #32]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80b1 	beq.w	8002f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dec:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <HAL_GPIO_Init+0x2bc>)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	220f      	movs	r2, #15
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a40      	ldr	r2, [pc, #256]	; (8002f14 <HAL_GPIO_Init+0x2c0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_GPIO_Init+0x1ec>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3f      	ldr	r2, [pc, #252]	; (8002f18 <HAL_GPIO_Init+0x2c4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_GPIO_Init+0x1e8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3e      	ldr	r2, [pc, #248]	; (8002f1c <HAL_GPIO_Init+0x2c8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <HAL_GPIO_Init+0x1e4>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3d      	ldr	r2, [pc, #244]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_GPIO_Init+0x1e0>
 8002e30:	2303      	movs	r3, #3
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e34:	2304      	movs	r3, #4
 8002e36:	e004      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e002      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_GPIO_Init+0x1ee>
 8002e40:	2300      	movs	r3, #0
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	f002 0203 	and.w	r2, r2, #3
 8002e48:	0092      	lsls	r2, r2, #2
 8002e4a:	4093      	lsls	r3, r2
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e52:	492f      	ldr	r1, [pc, #188]	; (8002f10 <HAL_GPIO_Init+0x2bc>)
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	3302      	adds	r3, #2
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	492c      	ldr	r1, [pc, #176]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4928      	ldr	r1, [pc, #160]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4922      	ldr	r1, [pc, #136]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	491e      	ldr	r1, [pc, #120]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4918      	ldr	r1, [pc, #96]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4914      	ldr	r1, [pc, #80]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d021      	beq.n	8002f28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e021      	b.n	8002f36 <HAL_GPIO_Init+0x2e2>
 8002ef2:	bf00      	nop
 8002ef4:	10320000 	.word	0x10320000
 8002ef8:	10310000 	.word	0x10310000
 8002efc:	10220000 	.word	0x10220000
 8002f00:	10210000 	.word	0x10210000
 8002f04:	10120000 	.word	0x10120000
 8002f08:	10110000 	.word	0x10110000
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40010800 	.word	0x40010800
 8002f18:	40010c00 	.word	0x40010c00
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	40011400 	.word	0x40011400
 8002f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	4909      	ldr	r1, [pc, #36]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	3301      	adds	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f ae8e 	bne.w	8002c68 <HAL_GPIO_Init+0x14>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	372c      	adds	r7, #44	; 0x2c
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40010400 	.word	0x40010400

08002f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e12b      	b.n	80031c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fe46 	bl	8001c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2224      	movs	r2, #36	; 0x24
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f002 f8c6 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4a81      	ldr	r2, [pc, #516]	; (80031d0 <HAL_I2C_Init+0x274>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d807      	bhi.n	8002fe0 <HAL_I2C_Init+0x84>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a80      	ldr	r2, [pc, #512]	; (80031d4 <HAL_I2C_Init+0x278>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	bf94      	ite	ls
 8002fd8:	2301      	movls	r3, #1
 8002fda:	2300      	movhi	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e006      	b.n	8002fee <HAL_I2C_Init+0x92>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a7d      	ldr	r2, [pc, #500]	; (80031d8 <HAL_I2C_Init+0x27c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e0e7      	b.n	80031c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a78      	ldr	r2, [pc, #480]	; (80031dc <HAL_I2C_Init+0x280>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0c9b      	lsrs	r3, r3, #18
 8003000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a6a      	ldr	r2, [pc, #424]	; (80031d0 <HAL_I2C_Init+0x274>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d802      	bhi.n	8003030 <HAL_I2C_Init+0xd4>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3301      	adds	r3, #1
 800302e:	e009      	b.n	8003044 <HAL_I2C_Init+0xe8>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a69      	ldr	r2, [pc, #420]	; (80031e0 <HAL_I2C_Init+0x284>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	3301      	adds	r3, #1
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	430b      	orrs	r3, r1
 800304a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	495c      	ldr	r1, [pc, #368]	; (80031d0 <HAL_I2C_Init+0x274>)
 8003060:	428b      	cmp	r3, r1
 8003062:	d819      	bhi.n	8003098 <HAL_I2C_Init+0x13c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e59      	subs	r1, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003072:	1c59      	adds	r1, r3, #1
 8003074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003078:	400b      	ands	r3, r1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_I2C_Init+0x138>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e59      	subs	r1, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fbb1 f3f3 	udiv	r3, r1, r3
 800308c:	3301      	adds	r3, #1
 800308e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003092:	e051      	b.n	8003138 <HAL_I2C_Init+0x1dc>
 8003094:	2304      	movs	r3, #4
 8003096:	e04f      	b.n	8003138 <HAL_I2C_Init+0x1dc>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <HAL_I2C_Init+0x168>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e58      	subs	r0, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	440b      	add	r3, r1
 80030ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e012      	b.n	80030ea <HAL_I2C_Init+0x18e>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	0099      	lsls	r1, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Init+0x196>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e022      	b.n	8003138 <HAL_I2C_Init+0x1dc>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10e      	bne.n	8003118 <HAL_I2C_Init+0x1bc>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1e58      	subs	r0, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	440b      	add	r3, r1
 8003108:	fbb0 f3f3 	udiv	r3, r0, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	e00f      	b.n	8003138 <HAL_I2C_Init+0x1dc>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	6809      	ldr	r1, [r1, #0]
 800313c:	4313      	orrs	r3, r2
 800313e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6911      	ldr	r1, [r2, #16]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	000186a0 	.word	0x000186a0
 80031d4:	001e847f 	.word	0x001e847f
 80031d8:	003d08ff 	.word	0x003d08ff
 80031dc:	431bde83 	.word	0x431bde83
 80031e0:	10624dd3 	.word	0x10624dd3

080031e4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d103      	bne.n	8003202 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  }
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b10      	cmp	r3, #16
 800323a:	d003      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x38>
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	f040 80c1 	bne.w	80033c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_I2C_EV_IRQHandler+0x6e>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003264:	d003      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x62>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800326c:	d101      	bne.n	8003272 <HAL_I2C_EV_IRQHandler+0x66>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_I2C_EV_IRQHandler+0x68>
 8003272:	2300      	movs	r3, #0
 8003274:	2b01      	cmp	r3, #1
 8003276:	f000 8132 	beq.w	80034de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0x92>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	0a5b      	lsrs	r3, r3, #9
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f001 fb79 	bl	8004988 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fcea 	bl	8003c70 <I2C_Master_SB>
 800329c:	e092      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0xb2>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fd5f 	bl	8003d7a <I2C_Master_ADD10>
 80032bc:	e082      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0xd2>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fd78 	bl	8003dcc <I2C_Master_ADDR>
 80032dc:	e072      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03b      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	f000 80f3 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	09db      	lsrs	r3, r3, #7
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <HAL_I2C_EV_IRQHandler+0x11c>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	0a9b      	lsrs	r3, r3, #10
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <HAL_I2C_EV_IRQHandler+0x11c>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f942 	bl	80035aa <I2C_MasterTransmit_TXE>
 8003326:	e04d      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80d6 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	0a5b      	lsrs	r3, r3, #9
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80cf 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	2b21      	cmp	r3, #33	; 0x21
 8003348:	d103      	bne.n	8003352 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9c9 	bl	80036e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003350:	e0c7      	b.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	f040 80c4 	bne.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa37 	bl	80037ce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003360:	e0bf      	b.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003370:	f000 80b7 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00f      	beq.n	80033a0 <HAL_I2C_EV_IRQHandler+0x194>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_I2C_EV_IRQHandler+0x194>
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fab0 	bl	80038fe <I2C_MasterReceive_RXNE>
 800339e:	e011      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 809a 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	0a5b      	lsrs	r3, r3, #9
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8093 	beq.w	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fb66 	bl	8003a8e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c2:	e08e      	b.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033c4:	e08d      	b.n	80034e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e007      	b.n	80033e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x20e>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	0a5b      	lsrs	r3, r3, #9
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 ff31 	bl	800427a <I2C_Slave_ADDR>
 8003418:	e066      	b.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x22e>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	0a5b      	lsrs	r3, r3, #9
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 ff6c 	bl	8004310 <I2C_Slave_STOPF>
 8003438:	e056      	b.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	2b21      	cmp	r3, #33	; 0x21
 800343e:	d002      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0x23a>
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	2b29      	cmp	r3, #41	; 0x29
 8003444:	d125      	bne.n	8003492 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	09db      	lsrs	r3, r3, #7
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00f      	beq.n	8003472 <HAL_I2C_EV_IRQHandler+0x266>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	0a9b      	lsrs	r3, r3, #10
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_I2C_EV_IRQHandler+0x266>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fe49 	bl	8004102 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003470:	e039      	b.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d033      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2da>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	0a5b      	lsrs	r3, r3, #9
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d02d      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fe76 	bl	800417c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003490:	e029      	b.n	80034e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00f      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x2b2>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	0a9b      	lsrs	r3, r3, #10
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x2b2>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fe80 	bl	80041bc <I2C_SlaveReceive_RXNE>
 80034bc:	e014      	b.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0a5b      	lsrs	r3, r3, #9
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 feae 	bl	8004238 <I2C_SlaveReceive_BTF>
 80034dc:	e004      	b.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
 8003542:	4613      	mov	r3, r2
 8003544:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d150      	bne.n	8003672 <I2C_MasterTransmit_TXE+0xc8>
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b21      	cmp	r3, #33	; 0x21
 80035d4:	d14d      	bne.n	8003672 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d01d      	beq.n	8003618 <I2C_MasterTransmit_TXE+0x6e>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d01a      	beq.n	8003618 <I2C_MasterTransmit_TXE+0x6e>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e8:	d016      	beq.n	8003618 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2211      	movs	r2, #17
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff6c 	bl	80034ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003616:	e060      	b.n	80036da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003626:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d107      	bne.n	8003662 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ff81 	bl	8003562 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003660:	e03b      	b.n	80036da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ff3f 	bl	80034ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003670:	e033      	b.n	80036da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b21      	cmp	r3, #33	; 0x21
 8003676:	d005      	beq.n	8003684 <I2C_MasterTransmit_TXE+0xda>
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d12d      	bne.n	80036da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b22      	cmp	r3, #34	; 0x22
 8003682:	d12a      	bne.n	80036da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800369e:	e01c      	b.n	80036da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d103      	bne.n	80036b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f88e 	bl	80037ce <I2C_MemoryTransmit_TXE_BTF>
}
 80036b2:	e012      	b.n	80036da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036d8:	e7ff      	b.n	80036da <I2C_MasterTransmit_TXE+0x130>
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b21      	cmp	r3, #33	; 0x21
 80036fa:	d164      	bne.n	80037c6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d012      	beq.n	800372c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800372a:	e04c      	b.n	80037c6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d01d      	beq.n	800376e <I2C_MasterTransmit_BTF+0x8c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b20      	cmp	r3, #32
 8003736:	d01a      	beq.n	800376e <I2C_MasterTransmit_BTF+0x8c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800373e:	d016      	beq.n	800376e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800374e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2211      	movs	r2, #17
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fec1 	bl	80034ee <HAL_I2C_MasterTxCpltCallback>
}
 800376c:	e02b      	b.n	80037c6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d107      	bne.n	80037b8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fed6 	bl	8003562 <HAL_I2C_MemTxCpltCallback>
}
 80037b6:	e006      	b.n	80037c6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe94 	bl	80034ee <HAL_I2C_MasterTxCpltCallback>
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d11d      	bne.n	8003822 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10b      	bne.n	8003806 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	1c9a      	adds	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003804:	e077      	b.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380a:	b29b      	uxth	r3, r3
 800380c:	121b      	asrs	r3, r3, #8
 800380e:	b2da      	uxtb	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003820:	e069      	b.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	2b01      	cmp	r3, #1
 8003828:	d10b      	bne.n	8003842 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	b2da      	uxtb	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003840:	e059      	b.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003846:	2b02      	cmp	r3, #2
 8003848:	d152      	bne.n	80038f0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b22      	cmp	r3, #34	; 0x22
 800384e:	d10d      	bne.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	651a      	str	r2, [r3, #80]	; 0x50
}
 800386a:	e044      	b.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b21      	cmp	r3, #33	; 0x21
 800387a:	d112      	bne.n	80038a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038a0:	e029      	b.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d124      	bne.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b21      	cmp	r3, #33	; 0x21
 80038b0:	d121      	bne.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038c0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fe3a 	bl	8003562 <HAL_I2C_MemTxCpltCallback>
}
 80038ee:	e002      	b.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fc77 	bl	80031e4 <I2C_Flush_DR>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b22      	cmp	r3, #34	; 0x22
 8003910:	f040 80b9 	bne.w	8003a86 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d921      	bls.n	800396c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b03      	cmp	r3, #3
 8003956:	f040 8096 	bne.w	8003a86 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003968:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800396a:	e08c      	b.n	8003a86 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2b02      	cmp	r3, #2
 8003972:	d07f      	beq.n	8003a74 <I2C_MasterReceive_RXNE+0x176>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d002      	beq.n	8003980 <I2C_MasterReceive_RXNE+0x82>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d179      	bne.n	8003a74 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 ffcf 	bl	8004924 <I2C_WaitOnSTOPRequestThroughIT>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d14c      	bne.n	8003a26 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d10a      	bne.n	80039fc <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fdbd 	bl	8003574 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039fa:	e044      	b.n	8003a86 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d002      	beq.n	8003a10 <I2C_MasterReceive_RXNE+0x112>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d103      	bne.n	8003a18 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
 8003a16:	e002      	b.n	8003a1e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2212      	movs	r2, #18
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fd6e 	bl	8003500 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a24:	e02f      	b.n	8003a86 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a34:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff fd8a 	bl	8003586 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a72:	e008      	b.n	8003a86 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a82:	605a      	str	r2, [r3, #4]
}
 8003a84:	e7ff      	b.n	8003a86 <I2C_MasterReceive_RXNE+0x188>
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d11b      	bne.n	8003ade <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003adc:	e0c4      	b.n	8003c68 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d129      	bne.n	8003b3c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d00a      	beq.n	8003b14 <I2C_MasterReceive_BTF+0x86>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d007      	beq.n	8003b14 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b12:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b3a:	e095      	b.n	8003c68 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d17d      	bne.n	8003c42 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d002      	beq.n	8003b52 <I2C_MasterReceive_BTF+0xc4>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d108      	bne.n	8003b64 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e016      	b.n	8003b92 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d002      	beq.n	8003b70 <I2C_MasterReceive_BTF+0xe2>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d108      	bne.n	8003b82 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e007      	b.n	8003b92 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d10a      	bne.n	8003c18 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fcaf 	bl	8003574 <HAL_I2C_MemRxCpltCallback>
}
 8003c16:	e027      	b.n	8003c68 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d002      	beq.n	8003c2c <I2C_MasterReceive_BTF+0x19e>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d103      	bne.n	8003c34 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
 8003c32:	e002      	b.n	8003c3a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2212      	movs	r2, #18
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fc60 	bl	8003500 <HAL_I2C_MasterRxCpltCallback>
}
 8003c40:	e012      	b.n	8003c68 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d117      	bne.n	8003cb4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c9e:	e067      	b.n	8003d70 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]
}
 8003cb2:	e05d      	b.n	8003d70 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cbc:	d133      	bne.n	8003d26 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b21      	cmp	r3, #33	; 0x21
 8003cc8:	d109      	bne.n	8003cde <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cda:	611a      	str	r2, [r3, #16]
 8003cdc:	e008      	b.n	8003cf0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <I2C_Master_SB+0x92>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d108      	bne.n	8003d14 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d032      	beq.n	8003d70 <I2C_Master_SB+0x100>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02d      	beq.n	8003d70 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d22:	605a      	str	r2, [r3, #4]
}
 8003d24:	e024      	b.n	8003d70 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10e      	bne.n	8003d4c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	11db      	asrs	r3, r3, #7
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0306 	and.w	r3, r3, #6
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f063 030f 	orn	r3, r3, #15
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	611a      	str	r2, [r3, #16]
}
 8003d4a:	e011      	b.n	8003d70 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10d      	bne.n	8003d70 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	11db      	asrs	r3, r3, #7
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f063 030e 	orn	r3, r3, #14
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <I2C_Master_ADD10+0x26>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <I2C_Master_ADD10+0x48>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc0:	605a      	str	r2, [r3, #4]
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b091      	sub	sp, #68	; 0x44
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b22      	cmp	r3, #34	; 0x22
 8003df4:	f040 8174 	bne.w	80040e0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <I2C_Master_ADDR+0x54>
 8003e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d10b      	bne.n	8003e20 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	e16b      	b.n	80040f8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11d      	bne.n	8003e64 <I2C_Master_ADDR+0x98>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e30:	d118      	bne.n	8003e64 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e56:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50
 8003e62:	e149      	b.n	80040f8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e120      	b.n	80040d8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 808a 	bne.w	8003fb6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea8:	d137      	bne.n	8003f1a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	d113      	bne.n	8003ef2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	e0f2      	b.n	80040d8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e0de      	b.n	80040d8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d02e      	beq.n	8003f7e <I2C_Master_ADDR+0x1b2>
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d02b      	beq.n	8003f7e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f28:	2b12      	cmp	r3, #18
 8003f2a:	d102      	bne.n	8003f32 <I2C_Master_ADDR+0x166>
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d125      	bne.n	8003f7e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d00e      	beq.n	8003f56 <I2C_Master_ADDR+0x18a>
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d00b      	beq.n	8003f56 <I2C_Master_ADDR+0x18a>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d008      	beq.n	8003f56 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f64:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	e0ac      	b.n	80040d8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e090      	b.n	80040d8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d158      	bne.n	8004072 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d021      	beq.n	800400a <I2C_Master_ADDR+0x23e>
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d01e      	beq.n	800400a <I2C_Master_ADDR+0x23e>
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d01b      	beq.n	800400a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e012      	b.n	8004030 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004018:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403e:	d14b      	bne.n	80040d8 <I2C_Master_ADDR+0x30c>
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004046:	d00b      	beq.n	8004060 <I2C_Master_ADDR+0x294>
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b01      	cmp	r3, #1
 800404c:	d008      	beq.n	8004060 <I2C_Master_ADDR+0x294>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b08      	cmp	r3, #8
 8004052:	d005      	beq.n	8004060 <I2C_Master_ADDR+0x294>
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	2b10      	cmp	r3, #16
 8004058:	d002      	beq.n	8004060 <I2C_Master_ADDR+0x294>
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b20      	cmp	r3, #32
 800405e:	d13b      	bne.n	80040d8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	e032      	b.n	80040d8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004080:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004090:	d117      	bne.n	80040c2 <I2C_Master_ADDR+0x2f6>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004098:	d00b      	beq.n	80040b2 <I2C_Master_ADDR+0x2e6>
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b01      	cmp	r3, #1
 800409e:	d008      	beq.n	80040b2 <I2C_Master_ADDR+0x2e6>
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d005      	beq.n	80040b2 <I2C_Master_ADDR+0x2e6>
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d002      	beq.n	80040b2 <I2C_Master_ADDR+0x2e6>
 80040ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d107      	bne.n	80040c2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040de:	e00b      	b.n	80040f8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
}
 80040f6:	e7ff      	b.n	80040f8 <I2C_Master_ADDR+0x32c>
 80040f8:	bf00      	nop
 80040fa:	3744      	adds	r7, #68	; 0x44
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02b      	beq.n	8004174 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d114      	bne.n	8004174 <I2C_SlaveTransmit_TXE+0x72>
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b29      	cmp	r3, #41	; 0x29
 800414e:	d111      	bne.n	8004174 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2221      	movs	r2, #33	; 0x21
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2228      	movs	r2, #40	; 0x28
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff f9cf 	bl	8003512 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d011      	beq.n	80041b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02c      	beq.n	8004230 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d114      	bne.n	8004230 <I2C_SlaveReceive_RXNE+0x74>
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b2a      	cmp	r3, #42	; 0x2a
 800420a:	d111      	bne.n	8004230 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2222      	movs	r2, #34	; 0x22
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2228      	movs	r2, #40	; 0x28
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff f97a 	bl	8003524 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004294:	2b28      	cmp	r3, #40	; 0x28
 8004296:	d127      	bne.n	80042e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	09db      	lsrs	r3, r3, #7
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d103      	bne.n	80042cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	81bb      	strh	r3, [r7, #12]
 80042ca:	e002      	b.n	80042d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042da:	89ba      	ldrh	r2, [r7, #12]
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff f928 	bl	8003536 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042e6:	e00e      	b.n	8004306 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800432e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800436c:	d172      	bne.n	8004454 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b22      	cmp	r3, #34	; 0x22
 8004372:	d002      	beq.n	800437a <I2C_Slave_STOPF+0x6a>
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b2a      	cmp	r3, #42	; 0x2a
 8004378:	d135      	bne.n	80043e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0204 	orr.w	r2, r3, #4
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fc14 	bl	8002be0 <HAL_DMA_GetState>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d049      	beq.n	8004452 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	4a69      	ldr	r2, [pc, #420]	; (8004568 <I2C_Slave_STOPF+0x258>)
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fa8a 	bl	80028e4 <HAL_DMA_Abort_IT>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d03d      	beq.n	8004452 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e0:	4610      	mov	r0, r2
 80043e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043e4:	e035      	b.n	8004452 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0204 	orr.w	r2, r3, #4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004418:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fbde 	bl	8002be0 <HAL_DMA_GetState>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d014      	beq.n	8004454 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	4a4e      	ldr	r2, [pc, #312]	; (8004568 <I2C_Slave_STOPF+0x258>)
 8004430:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fa54 	bl	80028e4 <HAL_DMA_Abort_IT>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
 8004450:	e000      	b.n	8004454 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004452:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d03e      	beq.n	80044dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d112      	bne.n	8004492 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d112      	bne.n	80044c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f843 	bl	8004570 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044ea:	e039      	b.n	8004560 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b2a      	cmp	r3, #42	; 0x2a
 80044f0:	d109      	bne.n	8004506 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2228      	movs	r2, #40	; 0x28
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff f80f 	bl	8003524 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b28      	cmp	r3, #40	; 0x28
 8004510:	d111      	bne.n	8004536 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <I2C_Slave_STOPF+0x25c>)
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff f80e 	bl	8003550 <HAL_I2C_ListenCpltCallback>
}
 8004534:	e014      	b.n	8004560 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	2b22      	cmp	r3, #34	; 0x22
 800453c:	d002      	beq.n	8004544 <I2C_Slave_STOPF+0x234>
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b22      	cmp	r3, #34	; 0x22
 8004542:	d10d      	bne.n	8004560 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe ffe2 	bl	8003524 <HAL_I2C_SlaveRxCpltCallback>
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	080047d5 	.word	0x080047d5
 800456c:	ffff0000 	.word	0xffff0000

08004570 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004586:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004588:	7bbb      	ldrb	r3, [r7, #14]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d002      	beq.n	8004594 <I2C_ITError+0x24>
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d10a      	bne.n	80045aa <I2C_ITError+0x3a>
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b22      	cmp	r3, #34	; 0x22
 8004598:	d107      	bne.n	80045aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045b0:	2b28      	cmp	r3, #40	; 0x28
 80045b2:	d107      	bne.n	80045c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2228      	movs	r2, #40	; 0x28
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045c2:	e015      	b.n	80045f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d00a      	beq.n	80045ea <I2C_ITError+0x7a>
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b60      	cmp	r3, #96	; 0x60
 80045d8:	d007      	beq.n	80045ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fe:	d162      	bne.n	80046c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d020      	beq.n	8004660 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	4a6a      	ldr	r2, [pc, #424]	; (80047cc <I2C_ITError+0x25c>)
 8004624:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe f95a 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8089 	beq.w	800474a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800465a:	4610      	mov	r0, r2
 800465c:	4798      	blx	r3
 800465e:	e074      	b.n	800474a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	4a59      	ldr	r2, [pc, #356]	; (80047cc <I2C_ITError+0x25c>)
 8004666:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe f939 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d068      	beq.n	800474a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d10b      	bne.n	800469e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046c0:	4610      	mov	r0, r2
 80046c2:	4798      	blx	r3
 80046c4:	e041      	b.n	800474a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b60      	cmp	r3, #96	; 0x60
 80046d0:	d125      	bne.n	800471e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d10b      	bne.n	8004706 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fe ff3e 	bl	8003598 <HAL_I2C_AbortCpltCallback>
 800471c:	e015      	b.n	800474a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d10b      	bne.n	8004744 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fe ff1e 	bl	8003586 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10e      	bne.n	8004778 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b04      	cmp	r3, #4
 800479a:	d113      	bne.n	80047c4 <I2C_ITError+0x254>
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b28      	cmp	r3, #40	; 0x28
 80047a0:	d110      	bne.n	80047c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <I2C_ITError+0x260>)
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe fec6 	bl	8003550 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	080047d5 	.word	0x080047d5
 80047d0:	ffff0000 	.word	0xffff0000

080047d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ee:	4b4b      	ldr	r3, [pc, #300]	; (800491c <I2C_DMAAbort+0x148>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	08db      	lsrs	r3, r3, #3
 80047f4:	4a4a      	ldr	r2, [pc, #296]	; (8004920 <I2C_DMAAbort+0x14c>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	0a1a      	lsrs	r2, r3, #8
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	00da      	lsls	r2, r3, #3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800481a:	e00a      	b.n	8004832 <I2C_DMAAbort+0x5e>
    }
    count--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004830:	d0ea      	beq.n	8004808 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	2200      	movs	r2, #0
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	2200      	movs	r2, #0
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004860:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2200      	movs	r2, #0
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	2200      	movs	r2, #0
 8004876:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	2200      	movs	r2, #0
 8004886:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b60      	cmp	r3, #96	; 0x60
 80048a2:	d10e      	bne.n	80048c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048ba:	6978      	ldr	r0, [r7, #20]
 80048bc:	f7fe fe6c 	bl	8003598 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048c0:	e027      	b.n	8004912 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048c8:	2b28      	cmp	r3, #40	; 0x28
 80048ca:	d117      	bne.n	80048fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2200      	movs	r2, #0
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2228      	movs	r2, #40	; 0x28
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048fa:	e007      	b.n	800490c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f7fe fe3a 	bl	8003586 <HAL_I2C_ErrorCallback>
}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000008 	.word	0x20000008
 8004920:	14f8b589 	.word	0x14f8b589

08004924 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	0a1a      	lsrs	r2, r3, #8
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0220 	orr.w	r2, r3, #32
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e008      	b.n	8004974 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004970:	d0e9      	beq.n	8004946 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000008 	.word	0x20000008
 8004984:	14f8b589 	.word	0x14f8b589

08004988 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004998:	d103      	bne.n	80049a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80049a0:	e007      	b.n	80049b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80049aa:	d102      	bne.n	80049b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2208      	movs	r2, #8
 80049b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e272      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8087 	beq.w	8004aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049dc:	4b92      	ldr	r3, [pc, #584]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d00c      	beq.n	8004a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049e8:	4b8f      	ldr	r3, [pc, #572]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d112      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
 80049f4:	4b8c      	ldr	r3, [pc, #560]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d10b      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a02:	4b89      	ldr	r3, [pc, #548]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d06c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d168      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e24c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x76>
 8004a24:	4b80      	ldr	r3, [pc, #512]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a7f      	ldr	r2, [pc, #508]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e02e      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x98>
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7a      	ldr	r2, [pc, #488]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b78      	ldr	r3, [pc, #480]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a77      	ldr	r2, [pc, #476]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0xbc>
 8004a5e:	4b72      	ldr	r3, [pc, #456]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a71      	ldr	r2, [pc, #452]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b6f      	ldr	r3, [pc, #444]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6e      	ldr	r2, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a78:	4b6b      	ldr	r3, [pc, #428]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6a      	ldr	r2, [pc, #424]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b68      	ldr	r3, [pc, #416]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a67      	ldr	r2, [pc, #412]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fd fb1c 	bl	80020d4 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd fb18 	bl	80020d4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e200      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b5d      	ldr	r3, [pc, #372]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xe4>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fb08 	bl	80020d4 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fb04 	bl	80020d4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1ec      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x10c>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004af6:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b02:	4b49      	ldr	r3, [pc, #292]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d11c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x18c>
 8004b0e:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	4b43      	ldr	r3, [pc, #268]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x176>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1c0      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4939      	ldr	r1, [pc, #228]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	e03a      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b50:	4b36      	ldr	r3, [pc, #216]	; (8004c2c <HAL_RCC_OscConfig+0x270>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fd fabd 	bl	80020d4 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fab9 	bl	80020d4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1a1      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4927      	ldr	r1, [pc, #156]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	e015      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <HAL_RCC_OscConfig+0x270>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fd fa9c 	bl	80020d4 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fa98 	bl	80020d4 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e180      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d03a      	beq.n	8004c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d019      	beq.n	8004c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fa7c 	bl	80020d4 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd fa78 	bl	80020d4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e160      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f000 face 	bl	80051a0 <RCC_Delay>
 8004c04:	e01c      	b.n	8004c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_RCC_OscConfig+0x274>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fa62 	bl	80020d4 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c12:	e00f      	b.n	8004c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fd fa5e 	bl	80020d4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d908      	bls.n	8004c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e146      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	42420000 	.word	0x42420000
 8004c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	4b92      	ldr	r3, [pc, #584]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e9      	bne.n	8004c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80a6 	beq.w	8004d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b8b      	ldr	r3, [pc, #556]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4a87      	ldr	r2, [pc, #540]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c68:	61d3      	str	r3, [r2, #28]
 8004c6a:	4b85      	ldr	r3, [pc, #532]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	4b82      	ldr	r3, [pc, #520]	; (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d118      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c86:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7e      	ldr	r2, [pc, #504]	; (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c92:	f7fd fa1f 	bl	80020d4 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fd fa1b 	bl	80020d4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b64      	cmp	r3, #100	; 0x64
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e103      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	4b75      	ldr	r3, [pc, #468]	; (8004e84 <HAL_RCC_OscConfig+0x4c8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x312>
 8004cc0:	4b6f      	ldr	r3, [pc, #444]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	4a6e      	ldr	r2, [pc, #440]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6213      	str	r3, [r2, #32]
 8004ccc:	e02d      	b.n	8004d2a <HAL_RCC_OscConfig+0x36e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x334>
 8004cd6:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4a69      	ldr	r2, [pc, #420]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6213      	str	r3, [r2, #32]
 8004ce2:	4b67      	ldr	r3, [pc, #412]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a66      	ldr	r2, [pc, #408]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	e01c      	b.n	8004d2a <HAL_RCC_OscConfig+0x36e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCC_OscConfig+0x356>
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	6213      	str	r3, [r2, #32]
 8004d04:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a5d      	ldr	r2, [pc, #372]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6213      	str	r3, [r2, #32]
 8004d10:	e00b      	b.n	8004d2a <HAL_RCC_OscConfig+0x36e>
 8004d12:	4b5b      	ldr	r3, [pc, #364]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4a5a      	ldr	r2, [pc, #360]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	4a57      	ldr	r2, [pc, #348]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fd f9cf 	bl	80020d4 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fd f9cb 	bl	80020d4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0b1      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ee      	beq.n	8004d3a <HAL_RCC_OscConfig+0x37e>
 8004d5c:	e014      	b.n	8004d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5e:	f7fd f9b9 	bl	80020d4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd f9b5 	bl	80020d4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e09b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ee      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8e:	4b3c      	ldr	r3, [pc, #240]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4a3b      	ldr	r2, [pc, #236]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8087 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da4:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 030c 	and.w	r3, r3, #12
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d061      	beq.n	8004e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d146      	bne.n	8004e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db8:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fd f989 	bl	80020d4 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd f985 	bl	80020d4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e06d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d108      	bne.n	8004e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4921      	ldr	r1, [pc, #132]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a19      	ldr	r1, [r3, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	430b      	orrs	r3, r1
 8004e12:	491b      	ldr	r1, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x4cc>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fd f959 	bl	80020d4 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fd f955 	bl	80020d4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e03d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x46a>
 8004e44:	e035      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <HAL_RCC_OscConfig+0x4cc>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fd f942 	bl	80020d4 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd f93e 	bl	80020d4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e026      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x498>
 8004e72:	e01e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e019      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40007000 	.word	0x40007000
 8004e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_OscConfig+0x500>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0d0      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d910      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b67      	ldr	r3, [pc, #412]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 0207 	bic.w	r2, r3, #7
 8004eea:	4965      	ldr	r1, [pc, #404]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b63      	ldr	r3, [pc, #396]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0b8      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f1c:	4b59      	ldr	r3, [pc, #356]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a58      	ldr	r2, [pc, #352]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f34:	4b53      	ldr	r3, [pc, #332]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a52      	ldr	r2, [pc, #328]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f40:	4b50      	ldr	r3, [pc, #320]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	494d      	ldr	r1, [pc, #308]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d040      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	4b47      	ldr	r3, [pc, #284]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d115      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07f      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b41      	ldr	r3, [pc, #260]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e073      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06b      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f9e:	4b39      	ldr	r3, [pc, #228]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4936      	ldr	r1, [pc, #216]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd f890 	bl	80020d4 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd f88c 	bl	80020d4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e053      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 020c 	and.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1eb      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d210      	bcs.n	8005010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 0207 	bic.w	r2, r3, #7
 8004ff6:	4922      	ldr	r1, [pc, #136]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e032      	b.n	8005076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4916      	ldr	r1, [pc, #88]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	490e      	ldr	r1, [pc, #56]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800504e:	f000 f821 	bl	8005094 <HAL_RCC_GetSysClockFreq>
 8005052:	4602      	mov	r2, r0
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	490a      	ldr	r1, [pc, #40]	; (8005088 <HAL_RCC_ClockConfig+0x1c8>)
 8005060:	5ccb      	ldrb	r3, [r1, r3]
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a09      	ldr	r2, [pc, #36]	; (800508c <HAL_RCC_ClockConfig+0x1cc>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800506a:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_ClockConfig+0x1d0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fc ffee 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	08008d44 	.word	0x08008d44
 800508c:	20000008 	.word	0x20000008
 8005090:	2000000c 	.word	0x2000000c

08005094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	2300      	movs	r3, #0
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050ae:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <HAL_RCC_GetSysClockFreq+0x94>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x30>
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x36>
 80050c2:	e027      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_RCC_GetSysClockFreq+0x98>)
 80050c6:	613b      	str	r3, [r7, #16]
      break;
 80050c8:	e027      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	0c9b      	lsrs	r3, r3, #18
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a17      	ldr	r2, [pc, #92]	; (8005130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d010      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_RCC_GetSysClockFreq+0x94>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	0c5b      	lsrs	r3, r3, #17
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050ee:	5cd3      	ldrb	r3, [r2, r3]
 80050f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <HAL_RCC_GetSysClockFreq+0x98>)
 80050f6:	fb03 f202 	mul.w	r2, r3, r2
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e004      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	613b      	str	r3, [r7, #16]
      break;
 8005112:	e002      	b.n	800511a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetSysClockFreq+0x98>)
 8005116:	613b      	str	r3, [r7, #16]
      break;
 8005118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800511a:	693b      	ldr	r3, [r7, #16]
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	007a1200 	.word	0x007a1200
 8005130:	08008d5c 	.word	0x08008d5c
 8005134:	08008d6c 	.word	0x08008d6c
 8005138:	003d0900 	.word	0x003d0900

0800513c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005140:	4b02      	ldr	r3, [pc, #8]	; (800514c <HAL_RCC_GetHCLKFreq+0x10>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	20000008 	.word	0x20000008

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005154:	f7ff fff2 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4903      	ldr	r1, [pc, #12]	; (8005174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	08008d54 	.word	0x08008d54

08005178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800517c:	f7ff ffde 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	0adb      	lsrs	r3, r3, #11
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK2Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	08008d54 	.word	0x08008d54

080051a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <RCC_Delay+0x34>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <RCC_Delay+0x38>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0a5b      	lsrs	r3, r3, #9
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051bc:	bf00      	nop
  }
  while (Delay --);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1e5a      	subs	r2, r3, #1
 80051c2:	60fa      	str	r2, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f9      	bne.n	80051bc <RCC_Delay+0x1c>
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	20000008 	.word	0x20000008
 80051d8:	10624dd3 	.word	0x10624dd3

080051dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d07d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051f8:	2300      	movs	r3, #0
 80051fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fc:	4b4f      	ldr	r3, [pc, #316]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10d      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005208:	4b4c      	ldr	r3, [pc, #304]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	4a4b      	ldr	r2, [pc, #300]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	61d3      	str	r3, [r2, #28]
 8005214:	4b49      	ldr	r3, [pc, #292]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005224:	4b46      	ldr	r3, [pc, #280]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d118      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005230:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a42      	ldr	r2, [pc, #264]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523c:	f7fc ff4a 	bl	80020d4 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005242:	e008      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005244:	f7fc ff46 	bl	80020d4 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	; 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e06d      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005262:	4b36      	ldr	r3, [pc, #216]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02e      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	429a      	cmp	r2, r3
 800527e:	d027      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005280:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800528a:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005290:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005296:	4a29      	ldr	r2, [pc, #164]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d014      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a6:	f7fc ff15 	bl	80020d4 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fc ff11 	bl	80020d4 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e036      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ee      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d0:	4b1a      	ldr	r3, [pc, #104]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4917      	ldr	r1, [pc, #92]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	490b      	ldr	r1, [pc, #44]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4904      	ldr	r1, [pc, #16]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
 8005340:	40007000 	.word	0x40007000
 8005344:	42420440 	.word	0x42420440

08005348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e076      	b.n	8005448 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d108      	bne.n	8005374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536a:	d009      	beq.n	8005380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
 8005372:	e005      	b.n	8005380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc fc80 	bl	8001ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	ea42 0103 	orr.w	r1, r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	0c1a      	lsrs	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f002 0204 	and.w	r2, r2, #4
 8005426:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005436:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005460:	f7fc fe38 	bl	80020d4 <HAL_GetTick>
 8005464:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d001      	beq.n	800547a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
 8005478:	e12a      	b.n	80056d0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Transmit+0x36>
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e122      	b.n	80056d0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_SPI_Transmit+0x48>
 8005494:	2302      	movs	r3, #2
 8005496:	e11b      	b.n	80056d0 <HAL_SPI_Transmit+0x280>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2203      	movs	r2, #3
 80054a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e6:	d10f      	bne.n	8005508 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005506:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d007      	beq.n	8005526 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005524:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552e:	d152      	bne.n	80055d6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_SPI_Transmit+0xee>
 8005538:	8b7b      	ldrh	r3, [r7, #26]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d145      	bne.n	80055ca <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	881a      	ldrh	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	1c9a      	adds	r2, r3, #2
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005562:	e032      	b.n	80055ca <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b02      	cmp	r3, #2
 8005570:	d112      	bne.n	8005598 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	86da      	strh	r2, [r3, #54]	; 0x36
 8005596:	e018      	b.n	80055ca <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005598:	f7fc fd9c 	bl	80020d4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d803      	bhi.n	80055b0 <HAL_SPI_Transmit+0x160>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x166>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e082      	b.n	80056d0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1c7      	bne.n	8005564 <HAL_SPI_Transmit+0x114>
 80055d4:	e053      	b.n	800567e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x194>
 80055de:	8b7b      	ldrh	r3, [r7, #26]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d147      	bne.n	8005674 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800560a:	e033      	b.n	8005674 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d113      	bne.n	8005642 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005640:	e018      	b.n	8005674 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005642:	f7fc fd47 	bl	80020d4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d803      	bhi.n	800565a <HAL_SPI_Transmit+0x20a>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d102      	bne.n	8005660 <HAL_SPI_Transmit+0x210>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e02d      	b.n	80056d0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1c6      	bne.n	800560c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f9f6 	bl	8005a74 <SPI_EndRxTxTransaction>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80056ce:	2300      	movs	r3, #0
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d001      	beq.n	80056f6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e097      	b.n	8005826 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_Transmit_DMA+0x2a>
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e08f      	b.n	8005826 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_SPI_Transmit_DMA+0x3c>
 8005710:	2302      	movs	r3, #2
 8005712:	e088      	b.n	8005826 <HAL_SPI_Transmit_DMA+0x14e>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2203      	movs	r2, #3
 8005720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005762:	d10f      	bne.n	8005784 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005782:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005788:	4a29      	ldr	r2, [pc, #164]	; (8005830 <HAL_SPI_Transmit_DMA+0x158>)
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	4a28      	ldr	r2, [pc, #160]	; (8005834 <HAL_SPI_Transmit_DMA+0x15c>)
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	4a27      	ldr	r2, [pc, #156]	; (8005838 <HAL_SPI_Transmit_DMA+0x160>)
 800579a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a0:	2200      	movs	r2, #0
 80057a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	4619      	mov	r1, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80057bc:	f7fd f832 	bl	8002824 <HAL_DMA_Start_IT>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f043 0210 	orr.w	r2, r3, #16
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e023      	b.n	8005826 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d007      	beq.n	80057fc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057fa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0220 	orr.w	r2, r2, #32
 8005812:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0202 	orr.w	r2, r2, #2
 8005822:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	08005907 	.word	0x08005907
 8005834:	08005861 	.word	0x08005861
 8005838:	08005923 	.word	0x08005923

0800583c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586e:	f7fc fc31 	bl	80020d4 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d03b      	beq.n	80058fa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0220 	bic.w	r2, r2, #32
 8005890:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0202 	bic.w	r2, r2, #2
 80058a0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	2164      	movs	r1, #100	; 0x64
 80058a6:	6978      	ldr	r0, [r7, #20]
 80058a8:	f000 f8e4 	bl	8005a74 <SPI_EndRxTxTransaction>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2200      	movs	r2, #0
 80058e0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80058f2:	6978      	ldr	r0, [r7, #20]
 80058f4:	f7ff ffab 	bl	800584e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80058f8:	e002      	b.n	8005900 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80058fa:	6978      	ldr	r0, [r7, #20]
 80058fc:	f7fb f846 	bl	800098c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff91 	bl	800583c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0203 	bic.w	r2, r2, #3
 800593e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	f043 0210 	orr.w	r2, r3, #16
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ff7a 	bl	800584e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005974:	f7fc fbae 	bl	80020d4 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4413      	add	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005984:	f7fc fba6 	bl	80020d4 <HAL_GetTick>
 8005988:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	015b      	lsls	r3, r3, #5
 8005990:	0d1b      	lsrs	r3, r3, #20
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	e054      	b.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d050      	beq.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059a4:	f7fc fb96 	bl	80020d4 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d902      	bls.n	80059ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d13d      	bne.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d2:	d111      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059dc:	d004      	beq.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e6:	d107      	bne.n	80059f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a00:	d10f      	bne.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e017      	b.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	bf0c      	ite	eq
 8005a56:	2301      	moveq	r3, #1
 8005a58:	2300      	movne	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d19b      	bne.n	800599c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000008 	.word	0x20000008

08005a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2201      	movs	r2, #1
 8005a88:	2102      	movs	r1, #2
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f7ff ff6a 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e013      	b.n	8005ace <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ff57 	bl	8005964 <SPI_WaitFlagStateUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e000      	b.n	8005ace <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e041      	b.n	8005b6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7fc f937 	bl	8001d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f000 fa07 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e041      	b.n	8005c0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc f906 	bl	8001dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 f9b8 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e0ae      	b.n	8005d90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	f200 809f 	bhi.w	8005d80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c7d 	.word	0x08005c7d
 8005c4c:	08005d81 	.word	0x08005d81
 8005c50:	08005d81 	.word	0x08005d81
 8005c54:	08005d81 	.word	0x08005d81
 8005c58:	08005cbd 	.word	0x08005cbd
 8005c5c:	08005d81 	.word	0x08005d81
 8005c60:	08005d81 	.word	0x08005d81
 8005c64:	08005d81 	.word	0x08005d81
 8005c68:	08005cff 	.word	0x08005cff
 8005c6c:	08005d81 	.word	0x08005d81
 8005c70:	08005d81 	.word	0x08005d81
 8005c74:	08005d81 	.word	0x08005d81
 8005c78:	08005d3f 	.word	0x08005d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f9be 	bl	8006004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0208 	orr.w	r2, r2, #8
 8005c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0204 	bic.w	r2, r2, #4
 8005ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6999      	ldr	r1, [r3, #24]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	619a      	str	r2, [r3, #24]
      break;
 8005cba:	e064      	b.n	8005d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fa04 	bl	80060d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6999      	ldr	r1, [r3, #24]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	021a      	lsls	r2, r3, #8
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	619a      	str	r2, [r3, #24]
      break;
 8005cfc:	e043      	b.n	8005d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fa4d 	bl	80061a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0204 	bic.w	r2, r2, #4
 8005d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	61da      	str	r2, [r3, #28]
      break;
 8005d3c:	e023      	b.n	8005d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fa97 	bl	8006278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69d9      	ldr	r1, [r3, #28]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	021a      	lsls	r2, r3, #8
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	61da      	str	r2, [r3, #28]
      break;
 8005d7e:	e002      	b.n	8005d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
      break;
 8005d84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIM_ConfigClockSource+0x1c>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e0b4      	b.n	8005f1e <HAL_TIM_ConfigClockSource+0x186>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dec:	d03e      	beq.n	8005e6c <HAL_TIM_ConfigClockSource+0xd4>
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df2:	f200 8087 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfa:	f000 8086 	beq.w	8005f0a <HAL_TIM_ConfigClockSource+0x172>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e02:	d87f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b70      	cmp	r3, #112	; 0x70
 8005e06:	d01a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0xa6>
 8005e08:	2b70      	cmp	r3, #112	; 0x70
 8005e0a:	d87b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b60      	cmp	r3, #96	; 0x60
 8005e0e:	d050      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e10:	2b60      	cmp	r3, #96	; 0x60
 8005e12:	d877      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b50      	cmp	r3, #80	; 0x50
 8005e16:	d03c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0xfa>
 8005e18:	2b50      	cmp	r3, #80	; 0x50
 8005e1a:	d873      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d058      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d86f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b30      	cmp	r3, #48	; 0x30
 8005e26:	d064      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d86b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d060      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d867      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05c      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d05a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e3c:	e062      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6899      	ldr	r1, [r3, #8]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f000 fad8 	bl	8006402 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	609a      	str	r2, [r3, #8]
      break;
 8005e6a:	e04f      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6899      	ldr	r1, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f000 fac1 	bl	8006402 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e8e:	609a      	str	r2, [r3, #8]
      break;
 8005e90:	e03c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 fa38 	bl	8006314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2150      	movs	r1, #80	; 0x50
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fa8f 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e02c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 fa56 	bl	8006370 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2160      	movs	r1, #96	; 0x60
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fa7f 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f000 fa18 	bl	8006314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2140      	movs	r1, #64	; 0x40
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fa6f 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005ef0:	e00c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f000 fa66 	bl	80063ce <TIM_ITRx_SetConfig>
      break;
 8005f02:	e003      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e000      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a2f      	ldr	r2, [pc, #188]	; (8005ff8 <TIM_Base_SetConfig+0xd0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_Base_SetConfig+0x30>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d007      	beq.n	8005f58 <TIM_Base_SetConfig+0x30>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a2c      	ldr	r2, [pc, #176]	; (8005ffc <TIM_Base_SetConfig+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0x30>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2b      	ldr	r2, [pc, #172]	; (8006000 <TIM_Base_SetConfig+0xd8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a22      	ldr	r2, [pc, #136]	; (8005ff8 <TIM_Base_SetConfig+0xd0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_Base_SetConfig+0x62>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0x62>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <TIM_Base_SetConfig+0xd4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0x62>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <TIM_Base_SetConfig+0xd8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0d      	ldr	r2, [pc, #52]	; (8005ff8 <TIM_Base_SetConfig+0xd0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d103      	bne.n	8005fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]
  }
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800

08006004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f023 0201 	bic.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0302 	bic.w	r3, r3, #2
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <TIM_OC1_SetConfig+0xc8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10c      	bne.n	800607a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0308 	bic.w	r3, r3, #8
 8006066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a13      	ldr	r2, [pc, #76]	; (80060cc <TIM_OC1_SetConfig+0xc8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d111      	bne.n	80060a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00

080060d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f023 0210 	bic.w	r2, r3, #16
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0320 	bic.w	r3, r3, #32
 800611a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <TIM_OC2_SetConfig+0xd0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d10d      	bne.n	800614c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <TIM_OC2_SetConfig+0xd0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d113      	bne.n	800617c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800615a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr
 80061a0:	40012c00 	.word	0x40012c00

080061a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <TIM_OC3_SetConfig+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d10d      	bne.n	800621e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800621c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a14      	ldr	r2, [pc, #80]	; (8006274 <TIM_OC3_SetConfig+0xd0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d113      	bne.n	800624e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800622c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00

08006278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <TIM_OC4_SetConfig+0x98>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d109      	bne.n	80062ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	019b      	lsls	r3, r3, #6
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40012c00 	.word	0x40012c00

08006314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f023 0201 	bic.w	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 030a 	bic.w	r3, r3, #10
 8006350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	621a      	str	r2, [r3, #32]
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f023 0210 	bic.w	r2, r3, #16
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800639a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	031b      	lsls	r3, r3, #12
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	621a      	str	r2, [r3, #32]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr

080063ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f043 0307 	orr.w	r3, r3, #7
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800641c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	021a      	lsls	r2, r3, #8
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	431a      	orrs	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4313      	orrs	r3, r2
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	609a      	str	r2, [r3, #8]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006454:	2302      	movs	r3, #2
 8006456:	e046      	b.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d009      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a12      	ldr	r2, [pc, #72]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10c      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800

080064fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e042      	b.n	8006594 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fb fc94 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2224      	movs	r2, #36	; 0x24
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f82b 	bl	800659c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80065d6:	f023 030c 	bic.w	r3, r3, #12
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	430b      	orrs	r3, r1
 80065e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <UART_SetConfig+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d103      	bne.n	800660c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7fe fdb8 	bl	8005178 <HAL_RCC_GetPCLK2Freq>
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	e002      	b.n	8006612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800660c:	f7fe fda0 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8006610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009a      	lsls	r2, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
 8006628:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <UART_SetConfig+0x118>)
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	0119      	lsls	r1, r3, #4
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009a      	lsls	r2, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	fbb2 f2f3 	udiv	r2, r2, r3
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <UART_SetConfig+0x118>)
 800664a:	fba3 0302 	umull	r0, r3, r3, r2
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2064      	movs	r0, #100	; 0x64
 8006652:	fb00 f303 	mul.w	r3, r0, r3
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	3332      	adds	r3, #50	; 0x32
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <UART_SetConfig+0x118>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006668:	4419      	add	r1, r3
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009a      	lsls	r2, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006680:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <UART_SetConfig+0x118>)
 8006682:	fba3 0302 	umull	r0, r3, r3, r2
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	2064      	movs	r0, #100	; 0x64
 800668a:	fb00 f303 	mul.w	r3, r0, r3
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	3332      	adds	r3, #50	; 0x32
 8006694:	4a07      	ldr	r2, [pc, #28]	; (80066b4 <UART_SetConfig+0x118>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	440a      	add	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40013800 	.word	0x40013800
 80066b4:	51eb851f 	.word	0x51eb851f

080066b8 <LL_GPIO_SetPinMode>:
{
 80066b8:	b490      	push	{r4, r7}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	0e1b      	lsrs	r3, r3, #24
 80066cc:	4413      	add	r3, r2
 80066ce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	fa93 f3a3 	rbit	r3, r3
 80066dc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	fab3 f383 	clz	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	210f      	movs	r1, #15
 80066ea:	fa01 f303 	lsl.w	r3, r1, r3
 80066ee:	43db      	mvns	r3, r3
 80066f0:	401a      	ands	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	fa93 f3a3 	rbit	r3, r3
 80066fc:	61bb      	str	r3, [r7, #24]
  return result;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	fab3 f383 	clz	r3, r3
 8006704:	b2db      	uxtb	r3, r3
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	6023      	str	r3, [r4, #0]
}
 8006712:	bf00      	nop
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bc90      	pop	{r4, r7}
 800671a:	4770      	bx	lr

0800671c <LL_GPIO_SetPinSpeed>:
{
 800671c:	b490      	push	{r4, r7}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	0e1b      	lsrs	r3, r3, #24
 8006730:	4413      	add	r3, r2
 8006732:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	fa93 f3a3 	rbit	r3, r3
 8006740:	613b      	str	r3, [r7, #16]
  return result;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	fab3 f383 	clz	r3, r3
 8006748:	b2db      	uxtb	r3, r3
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	2103      	movs	r1, #3
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	401a      	ands	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	fa93 f3a3 	rbit	r3, r3
 8006760:	61bb      	str	r3, [r7, #24]
  return result;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	fab3 f383 	clz	r3, r3
 8006768:	b2db      	uxtb	r3, r3
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	4313      	orrs	r3, r2
 8006774:	6023      	str	r3, [r4, #0]
}
 8006776:	bf00      	nop
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bc90      	pop	{r4, r7}
 800677e:	4770      	bx	lr

08006780 <LL_GPIO_SetPinOutputType>:
{
 8006780:	b490      	push	{r4, r7}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	0e1b      	lsrs	r3, r3, #24
 8006794:	4413      	add	r3, r2
 8006796:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	fa93 f3a3 	rbit	r3, r3
 80067a4:	613b      	str	r3, [r7, #16]
  return result;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	fab3 f383 	clz	r3, r3
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	2104      	movs	r1, #4
 80067b2:	fa01 f303 	lsl.w	r3, r1, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	401a      	ands	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	fa93 f3a3 	rbit	r3, r3
 80067c4:	61bb      	str	r3, [r7, #24]
  return result;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	fab3 f383 	clz	r3, r3
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	6023      	str	r3, [r4, #0]
}
 80067da:	bf00      	nop
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc90      	pop	{r4, r7}
 80067e2:	4770      	bx	lr

080067e4 <LL_GPIO_SetPinPull>:
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	43db      	mvns	r3, r3
 80067fa:	401a      	ands	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	fa93 f3a3 	rbit	r3, r3
 8006808:	613b      	str	r3, [r7, #16]
  return result;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	fab3 f383 	clz	r3, r3
 8006810:	b2db      	uxtb	r3, r3
 8006812:	4619      	mov	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	408b      	lsls	r3, r1
 8006818:	431a      	orrs	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	60da      	str	r2, [r3, #12]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	fa93 f3a3 	rbit	r3, r3
 8006846:	60fb      	str	r3, [r7, #12]
  return result;
 8006848:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800684a:	fab3 f383 	clz	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8006852:	e044      	b.n	80068de <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8006854:	2201      	movs	r2, #1
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	409a      	lsls	r2, r3
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	4013      	ands	r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d03a      	beq.n	80068d8 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b07      	cmp	r3, #7
 8006866:	d806      	bhi.n	8006876 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8006868:	f240 1201 	movw	r2, #257	; 0x101
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e008      	b.n	8006888 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3b08      	subs	r3, #8
 800687a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006886:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d106      	bne.n	800689e <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	461a      	mov	r2, r3
 8006896:	69b9      	ldr	r1, [r7, #24]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ffa3 	bl	80067e4 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	461a      	mov	r2, r3
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff06 	bl	80066b8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d003      	beq.n	80068bc <LL_GPIO_Init+0x94>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d10d      	bne.n	80068d8 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	461a      	mov	r2, r3
 80068c2:	69b9      	ldr	r1, [r7, #24]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ff29 	bl	800671c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	461a      	mov	r2, r3
 80068d0:	69b9      	ldr	r1, [r7, #24]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff ff54 	bl	8006780 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	3301      	adds	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	fa22 f303 	lsr.w	r3, r2, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1b4      	bne.n	8006854 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <__errno>:
 80068f4:	4b01      	ldr	r3, [pc, #4]	; (80068fc <__errno+0x8>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20000014 	.word	0x20000014

08006900 <__libc_init_array>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	2600      	movs	r6, #0
 8006904:	4d0c      	ldr	r5, [pc, #48]	; (8006938 <__libc_init_array+0x38>)
 8006906:	4c0d      	ldr	r4, [pc, #52]	; (800693c <__libc_init_array+0x3c>)
 8006908:	1b64      	subs	r4, r4, r5
 800690a:	10a4      	asrs	r4, r4, #2
 800690c:	42a6      	cmp	r6, r4
 800690e:	d109      	bne.n	8006924 <__libc_init_array+0x24>
 8006910:	f000 fc9c 	bl	800724c <_init>
 8006914:	2600      	movs	r6, #0
 8006916:	4d0a      	ldr	r5, [pc, #40]	; (8006940 <__libc_init_array+0x40>)
 8006918:	4c0a      	ldr	r4, [pc, #40]	; (8006944 <__libc_init_array+0x44>)
 800691a:	1b64      	subs	r4, r4, r5
 800691c:	10a4      	asrs	r4, r4, #2
 800691e:	42a6      	cmp	r6, r4
 8006920:	d105      	bne.n	800692e <__libc_init_array+0x2e>
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	f855 3b04 	ldr.w	r3, [r5], #4
 8006928:	4798      	blx	r3
 800692a:	3601      	adds	r6, #1
 800692c:	e7ee      	b.n	800690c <__libc_init_array+0xc>
 800692e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006932:	4798      	blx	r3
 8006934:	3601      	adds	r6, #1
 8006936:	e7f2      	b.n	800691e <__libc_init_array+0x1e>
 8006938:	08008da4 	.word	0x08008da4
 800693c:	08008da4 	.word	0x08008da4
 8006940:	08008da4 	.word	0x08008da4
 8006944:	08008da8 	.word	0x08008da8

08006948 <memset>:
 8006948:	4603      	mov	r3, r0
 800694a:	4402      	add	r2, r0
 800694c:	4293      	cmp	r3, r2
 800694e:	d100      	bne.n	8006952 <memset+0xa>
 8006950:	4770      	bx	lr
 8006952:	f803 1b01 	strb.w	r1, [r3], #1
 8006956:	e7f9      	b.n	800694c <memset+0x4>

08006958 <siprintf>:
 8006958:	b40e      	push	{r1, r2, r3}
 800695a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800695e:	b500      	push	{lr}
 8006960:	b09c      	sub	sp, #112	; 0x70
 8006962:	ab1d      	add	r3, sp, #116	; 0x74
 8006964:	9002      	str	r0, [sp, #8]
 8006966:	9006      	str	r0, [sp, #24]
 8006968:	9107      	str	r1, [sp, #28]
 800696a:	9104      	str	r1, [sp, #16]
 800696c:	4808      	ldr	r0, [pc, #32]	; (8006990 <siprintf+0x38>)
 800696e:	4909      	ldr	r1, [pc, #36]	; (8006994 <siprintf+0x3c>)
 8006970:	f853 2b04 	ldr.w	r2, [r3], #4
 8006974:	9105      	str	r1, [sp, #20]
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	a902      	add	r1, sp, #8
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	f000 f868 	bl	8006a50 <_svfiprintf_r>
 8006980:	2200      	movs	r2, #0
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	b01c      	add	sp, #112	; 0x70
 8006988:	f85d eb04 	ldr.w	lr, [sp], #4
 800698c:	b003      	add	sp, #12
 800698e:	4770      	bx	lr
 8006990:	20000014 	.word	0x20000014
 8006994:	ffff0208 	.word	0xffff0208

08006998 <__ssputs_r>:
 8006998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	688e      	ldr	r6, [r1, #8]
 800699e:	4682      	mov	sl, r0
 80069a0:	429e      	cmp	r6, r3
 80069a2:	460c      	mov	r4, r1
 80069a4:	4690      	mov	r8, r2
 80069a6:	461f      	mov	r7, r3
 80069a8:	d838      	bhi.n	8006a1c <__ssputs_r+0x84>
 80069aa:	898a      	ldrh	r2, [r1, #12]
 80069ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069b0:	d032      	beq.n	8006a18 <__ssputs_r+0x80>
 80069b2:	6825      	ldr	r5, [r4, #0]
 80069b4:	6909      	ldr	r1, [r1, #16]
 80069b6:	3301      	adds	r3, #1
 80069b8:	eba5 0901 	sub.w	r9, r5, r1
 80069bc:	6965      	ldr	r5, [r4, #20]
 80069be:	444b      	add	r3, r9
 80069c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069c8:	106d      	asrs	r5, r5, #1
 80069ca:	429d      	cmp	r5, r3
 80069cc:	bf38      	it	cc
 80069ce:	461d      	movcc	r5, r3
 80069d0:	0553      	lsls	r3, r2, #21
 80069d2:	d531      	bpl.n	8006a38 <__ssputs_r+0xa0>
 80069d4:	4629      	mov	r1, r5
 80069d6:	f000 fb6f 	bl	80070b8 <_malloc_r>
 80069da:	4606      	mov	r6, r0
 80069dc:	b950      	cbnz	r0, 80069f4 <__ssputs_r+0x5c>
 80069de:	230c      	movs	r3, #12
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	f8ca 3000 	str.w	r3, [sl]
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f4:	464a      	mov	r2, r9
 80069f6:	6921      	ldr	r1, [r4, #16]
 80069f8:	f000 face 	bl	8006f98 <memcpy>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	6126      	str	r6, [r4, #16]
 8006a0a:	444e      	add	r6, r9
 8006a0c:	6026      	str	r6, [r4, #0]
 8006a0e:	463e      	mov	r6, r7
 8006a10:	6165      	str	r5, [r4, #20]
 8006a12:	eba5 0509 	sub.w	r5, r5, r9
 8006a16:	60a5      	str	r5, [r4, #8]
 8006a18:	42be      	cmp	r6, r7
 8006a1a:	d900      	bls.n	8006a1e <__ssputs_r+0x86>
 8006a1c:	463e      	mov	r6, r7
 8006a1e:	4632      	mov	r2, r6
 8006a20:	4641      	mov	r1, r8
 8006a22:	6820      	ldr	r0, [r4, #0]
 8006a24:	f000 fac6 	bl	8006fb4 <memmove>
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	1b9b      	subs	r3, r3, r6
 8006a2e:	60a3      	str	r3, [r4, #8]
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	4433      	add	r3, r6
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	e7db      	b.n	80069f0 <__ssputs_r+0x58>
 8006a38:	462a      	mov	r2, r5
 8006a3a:	f000 fbb1 	bl	80071a0 <_realloc_r>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d1e1      	bne.n	8006a08 <__ssputs_r+0x70>
 8006a44:	4650      	mov	r0, sl
 8006a46:	6921      	ldr	r1, [r4, #16]
 8006a48:	f000 face 	bl	8006fe8 <_free_r>
 8006a4c:	e7c7      	b.n	80069de <__ssputs_r+0x46>
	...

08006a50 <_svfiprintf_r>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	4698      	mov	r8, r3
 8006a56:	898b      	ldrh	r3, [r1, #12]
 8006a58:	4607      	mov	r7, r0
 8006a5a:	061b      	lsls	r3, r3, #24
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	4614      	mov	r4, r2
 8006a60:	b09d      	sub	sp, #116	; 0x74
 8006a62:	d50e      	bpl.n	8006a82 <_svfiprintf_r+0x32>
 8006a64:	690b      	ldr	r3, [r1, #16]
 8006a66:	b963      	cbnz	r3, 8006a82 <_svfiprintf_r+0x32>
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	f000 fb25 	bl	80070b8 <_malloc_r>
 8006a6e:	6028      	str	r0, [r5, #0]
 8006a70:	6128      	str	r0, [r5, #16]
 8006a72:	b920      	cbnz	r0, 8006a7e <_svfiprintf_r+0x2e>
 8006a74:	230c      	movs	r3, #12
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	e0d1      	b.n	8006c22 <_svfiprintf_r+0x1d2>
 8006a7e:	2340      	movs	r3, #64	; 0x40
 8006a80:	616b      	str	r3, [r5, #20]
 8006a82:	2300      	movs	r3, #0
 8006a84:	9309      	str	r3, [sp, #36]	; 0x24
 8006a86:	2320      	movs	r3, #32
 8006a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a8c:	2330      	movs	r3, #48	; 0x30
 8006a8e:	f04f 0901 	mov.w	r9, #1
 8006a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c3c <_svfiprintf_r+0x1ec>
 8006a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	469a      	mov	sl, r3
 8006aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aa6:	b10a      	cbz	r2, 8006aac <_svfiprintf_r+0x5c>
 8006aa8:	2a25      	cmp	r2, #37	; 0x25
 8006aaa:	d1f9      	bne.n	8006aa0 <_svfiprintf_r+0x50>
 8006aac:	ebba 0b04 	subs.w	fp, sl, r4
 8006ab0:	d00b      	beq.n	8006aca <_svfiprintf_r+0x7a>
 8006ab2:	465b      	mov	r3, fp
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4638      	mov	r0, r7
 8006aba:	f7ff ff6d 	bl	8006998 <__ssputs_r>
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f000 80aa 	beq.w	8006c18 <_svfiprintf_r+0x1c8>
 8006ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ac6:	445a      	add	r2, fp
 8006ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8006aca:	f89a 3000 	ldrb.w	r3, [sl]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80a2 	beq.w	8006c18 <_svfiprintf_r+0x1c8>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ade:	f10a 0a01 	add.w	sl, sl, #1
 8006ae2:	9304      	str	r3, [sp, #16]
 8006ae4:	9307      	str	r3, [sp, #28]
 8006ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aea:	931a      	str	r3, [sp, #104]	; 0x68
 8006aec:	4654      	mov	r4, sl
 8006aee:	2205      	movs	r2, #5
 8006af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af4:	4851      	ldr	r0, [pc, #324]	; (8006c3c <_svfiprintf_r+0x1ec>)
 8006af6:	f000 fa41 	bl	8006f7c <memchr>
 8006afa:	9a04      	ldr	r2, [sp, #16]
 8006afc:	b9d8      	cbnz	r0, 8006b36 <_svfiprintf_r+0xe6>
 8006afe:	06d0      	lsls	r0, r2, #27
 8006b00:	bf44      	itt	mi
 8006b02:	2320      	movmi	r3, #32
 8006b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b08:	0711      	lsls	r1, r2, #28
 8006b0a:	bf44      	itt	mi
 8006b0c:	232b      	movmi	r3, #43	; 0x2b
 8006b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b12:	f89a 3000 	ldrb.w	r3, [sl]
 8006b16:	2b2a      	cmp	r3, #42	; 0x2a
 8006b18:	d015      	beq.n	8006b46 <_svfiprintf_r+0xf6>
 8006b1a:	4654      	mov	r4, sl
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f04f 0c0a 	mov.w	ip, #10
 8006b22:	9a07      	ldr	r2, [sp, #28]
 8006b24:	4621      	mov	r1, r4
 8006b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b2a:	3b30      	subs	r3, #48	; 0x30
 8006b2c:	2b09      	cmp	r3, #9
 8006b2e:	d94e      	bls.n	8006bce <_svfiprintf_r+0x17e>
 8006b30:	b1b0      	cbz	r0, 8006b60 <_svfiprintf_r+0x110>
 8006b32:	9207      	str	r2, [sp, #28]
 8006b34:	e014      	b.n	8006b60 <_svfiprintf_r+0x110>
 8006b36:	eba0 0308 	sub.w	r3, r0, r8
 8006b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	46a2      	mov	sl, r4
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	e7d2      	b.n	8006aec <_svfiprintf_r+0x9c>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	1d19      	adds	r1, r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	9103      	str	r1, [sp, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfbb      	ittet	lt
 8006b52:	425b      	neglt	r3, r3
 8006b54:	f042 0202 	orrlt.w	r2, r2, #2
 8006b58:	9307      	strge	r3, [sp, #28]
 8006b5a:	9307      	strlt	r3, [sp, #28]
 8006b5c:	bfb8      	it	lt
 8006b5e:	9204      	strlt	r2, [sp, #16]
 8006b60:	7823      	ldrb	r3, [r4, #0]
 8006b62:	2b2e      	cmp	r3, #46	; 0x2e
 8006b64:	d10c      	bne.n	8006b80 <_svfiprintf_r+0x130>
 8006b66:	7863      	ldrb	r3, [r4, #1]
 8006b68:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6a:	d135      	bne.n	8006bd8 <_svfiprintf_r+0x188>
 8006b6c:	9b03      	ldr	r3, [sp, #12]
 8006b6e:	3402      	adds	r4, #2
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	9203      	str	r2, [sp, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfb8      	it	lt
 8006b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c40 <_svfiprintf_r+0x1f0>
 8006b84:	2203      	movs	r2, #3
 8006b86:	4650      	mov	r0, sl
 8006b88:	7821      	ldrb	r1, [r4, #0]
 8006b8a:	f000 f9f7 	bl	8006f7c <memchr>
 8006b8e:	b140      	cbz	r0, 8006ba2 <_svfiprintf_r+0x152>
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	eba0 000a 	sub.w	r0, r0, sl
 8006b96:	fa03 f000 	lsl.w	r0, r3, r0
 8006b9a:	9b04      	ldr	r3, [sp, #16]
 8006b9c:	3401      	adds	r4, #1
 8006b9e:	4303      	orrs	r3, r0
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba6:	2206      	movs	r2, #6
 8006ba8:	4826      	ldr	r0, [pc, #152]	; (8006c44 <_svfiprintf_r+0x1f4>)
 8006baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bae:	f000 f9e5 	bl	8006f7c <memchr>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d038      	beq.n	8006c28 <_svfiprintf_r+0x1d8>
 8006bb6:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <_svfiprintf_r+0x1f8>)
 8006bb8:	bb1b      	cbnz	r3, 8006c02 <_svfiprintf_r+0x1b2>
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	3307      	adds	r3, #7
 8006bbe:	f023 0307 	bic.w	r3, r3, #7
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	9303      	str	r3, [sp, #12]
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	4433      	add	r3, r6
 8006bca:	9309      	str	r3, [sp, #36]	; 0x24
 8006bcc:	e767      	b.n	8006a9e <_svfiprintf_r+0x4e>
 8006bce:	460c      	mov	r4, r1
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bd6:	e7a5      	b.n	8006b24 <_svfiprintf_r+0xd4>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f04f 0c0a 	mov.w	ip, #10
 8006bde:	4619      	mov	r1, r3
 8006be0:	3401      	adds	r4, #1
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	4620      	mov	r0, r4
 8006be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bea:	3a30      	subs	r2, #48	; 0x30
 8006bec:	2a09      	cmp	r2, #9
 8006bee:	d903      	bls.n	8006bf8 <_svfiprintf_r+0x1a8>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0c5      	beq.n	8006b80 <_svfiprintf_r+0x130>
 8006bf4:	9105      	str	r1, [sp, #20]
 8006bf6:	e7c3      	b.n	8006b80 <_svfiprintf_r+0x130>
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c00:	e7f0      	b.n	8006be4 <_svfiprintf_r+0x194>
 8006c02:	ab03      	add	r3, sp, #12
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	462a      	mov	r2, r5
 8006c08:	4638      	mov	r0, r7
 8006c0a:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <_svfiprintf_r+0x1fc>)
 8006c0c:	a904      	add	r1, sp, #16
 8006c0e:	f3af 8000 	nop.w
 8006c12:	1c42      	adds	r2, r0, #1
 8006c14:	4606      	mov	r6, r0
 8006c16:	d1d6      	bne.n	8006bc6 <_svfiprintf_r+0x176>
 8006c18:	89ab      	ldrh	r3, [r5, #12]
 8006c1a:	065b      	lsls	r3, r3, #25
 8006c1c:	f53f af2c 	bmi.w	8006a78 <_svfiprintf_r+0x28>
 8006c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c22:	b01d      	add	sp, #116	; 0x74
 8006c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c28:	ab03      	add	r3, sp, #12
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	462a      	mov	r2, r5
 8006c2e:	4638      	mov	r0, r7
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <_svfiprintf_r+0x1fc>)
 8006c32:	a904      	add	r1, sp, #16
 8006c34:	f000 f87c 	bl	8006d30 <_printf_i>
 8006c38:	e7eb      	b.n	8006c12 <_svfiprintf_r+0x1c2>
 8006c3a:	bf00      	nop
 8006c3c:	08008d6e 	.word	0x08008d6e
 8006c40:	08008d74 	.word	0x08008d74
 8006c44:	08008d78 	.word	0x08008d78
 8006c48:	00000000 	.word	0x00000000
 8006c4c:	08006999 	.word	0x08006999

08006c50 <_printf_common>:
 8006c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c54:	4616      	mov	r6, r2
 8006c56:	4699      	mov	r9, r3
 8006c58:	688a      	ldr	r2, [r1, #8]
 8006c5a:	690b      	ldr	r3, [r1, #16]
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bfb8      	it	lt
 8006c62:	4613      	movlt	r3, r2
 8006c64:	6033      	str	r3, [r6, #0]
 8006c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c70:	b10a      	cbz	r2, 8006c76 <_printf_common+0x26>
 8006c72:	3301      	adds	r3, #1
 8006c74:	6033      	str	r3, [r6, #0]
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	0699      	lsls	r1, r3, #26
 8006c7a:	bf42      	ittt	mi
 8006c7c:	6833      	ldrmi	r3, [r6, #0]
 8006c7e:	3302      	addmi	r3, #2
 8006c80:	6033      	strmi	r3, [r6, #0]
 8006c82:	6825      	ldr	r5, [r4, #0]
 8006c84:	f015 0506 	ands.w	r5, r5, #6
 8006c88:	d106      	bne.n	8006c98 <_printf_common+0x48>
 8006c8a:	f104 0a19 	add.w	sl, r4, #25
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	6832      	ldr	r2, [r6, #0]
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dc28      	bgt.n	8006cea <_printf_common+0x9a>
 8006c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c9c:	1e13      	subs	r3, r2, #0
 8006c9e:	6822      	ldr	r2, [r4, #0]
 8006ca0:	bf18      	it	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	0692      	lsls	r2, r2, #26
 8006ca6:	d42d      	bmi.n	8006d04 <_printf_common+0xb4>
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4638      	mov	r0, r7
 8006cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cb0:	47c0      	blx	r8
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d020      	beq.n	8006cf8 <_printf_common+0xa8>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	68e5      	ldr	r5, [r4, #12]
 8006cba:	f003 0306 	and.w	r3, r3, #6
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	bf18      	it	ne
 8006cc2:	2500      	movne	r5, #0
 8006cc4:	6832      	ldr	r2, [r6, #0]
 8006cc6:	f04f 0600 	mov.w	r6, #0
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	bf08      	it	eq
 8006cce:	1aad      	subeq	r5, r5, r2
 8006cd0:	6922      	ldr	r2, [r4, #16]
 8006cd2:	bf08      	it	eq
 8006cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	bfc4      	itt	gt
 8006cdc:	1a9b      	subgt	r3, r3, r2
 8006cde:	18ed      	addgt	r5, r5, r3
 8006ce0:	341a      	adds	r4, #26
 8006ce2:	42b5      	cmp	r5, r6
 8006ce4:	d11a      	bne.n	8006d1c <_printf_common+0xcc>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e008      	b.n	8006cfc <_printf_common+0xac>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4652      	mov	r2, sl
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	47c0      	blx	r8
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d103      	bne.n	8006d00 <_printf_common+0xb0>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d00:	3501      	adds	r5, #1
 8006d02:	e7c4      	b.n	8006c8e <_printf_common+0x3e>
 8006d04:	2030      	movs	r0, #48	; 0x30
 8006d06:	18e1      	adds	r1, r4, r3
 8006d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d12:	4422      	add	r2, r4
 8006d14:	3302      	adds	r3, #2
 8006d16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d1a:	e7c5      	b.n	8006ca8 <_printf_common+0x58>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4649      	mov	r1, r9
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c0      	blx	r8
 8006d26:	3001      	adds	r0, #1
 8006d28:	d0e6      	beq.n	8006cf8 <_printf_common+0xa8>
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7d9      	b.n	8006ce2 <_printf_common+0x92>
	...

08006d30 <_printf_i>:
 8006d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	7e0f      	ldrb	r7, [r1, #24]
 8006d36:	4691      	mov	r9, r2
 8006d38:	2f78      	cmp	r7, #120	; 0x78
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	469a      	mov	sl, r3
 8006d40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d46:	d807      	bhi.n	8006d58 <_printf_i+0x28>
 8006d48:	2f62      	cmp	r7, #98	; 0x62
 8006d4a:	d80a      	bhi.n	8006d62 <_printf_i+0x32>
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	f000 80d9 	beq.w	8006f04 <_printf_i+0x1d4>
 8006d52:	2f58      	cmp	r7, #88	; 0x58
 8006d54:	f000 80a4 	beq.w	8006ea0 <_printf_i+0x170>
 8006d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d60:	e03a      	b.n	8006dd8 <_printf_i+0xa8>
 8006d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d66:	2b15      	cmp	r3, #21
 8006d68:	d8f6      	bhi.n	8006d58 <_printf_i+0x28>
 8006d6a:	a101      	add	r1, pc, #4	; (adr r1, 8006d70 <_printf_i+0x40>)
 8006d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d70:	08006dc9 	.word	0x08006dc9
 8006d74:	08006ddd 	.word	0x08006ddd
 8006d78:	08006d59 	.word	0x08006d59
 8006d7c:	08006d59 	.word	0x08006d59
 8006d80:	08006d59 	.word	0x08006d59
 8006d84:	08006d59 	.word	0x08006d59
 8006d88:	08006ddd 	.word	0x08006ddd
 8006d8c:	08006d59 	.word	0x08006d59
 8006d90:	08006d59 	.word	0x08006d59
 8006d94:	08006d59 	.word	0x08006d59
 8006d98:	08006d59 	.word	0x08006d59
 8006d9c:	08006eeb 	.word	0x08006eeb
 8006da0:	08006e0d 	.word	0x08006e0d
 8006da4:	08006ecd 	.word	0x08006ecd
 8006da8:	08006d59 	.word	0x08006d59
 8006dac:	08006d59 	.word	0x08006d59
 8006db0:	08006f0d 	.word	0x08006f0d
 8006db4:	08006d59 	.word	0x08006d59
 8006db8:	08006e0d 	.word	0x08006e0d
 8006dbc:	08006d59 	.word	0x08006d59
 8006dc0:	08006d59 	.word	0x08006d59
 8006dc4:	08006ed5 	.word	0x08006ed5
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	602a      	str	r2, [r5, #0]
 8006dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0a4      	b.n	8006f26 <_printf_i+0x1f6>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	6829      	ldr	r1, [r5, #0]
 8006de0:	0606      	lsls	r6, r0, #24
 8006de2:	f101 0304 	add.w	r3, r1, #4
 8006de6:	d50a      	bpl.n	8006dfe <_printf_i+0xce>
 8006de8:	680e      	ldr	r6, [r1, #0]
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	da03      	bge.n	8006df8 <_printf_i+0xc8>
 8006df0:	232d      	movs	r3, #45	; 0x2d
 8006df2:	4276      	negs	r6, r6
 8006df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df8:	230a      	movs	r3, #10
 8006dfa:	485e      	ldr	r0, [pc, #376]	; (8006f74 <_printf_i+0x244>)
 8006dfc:	e019      	b.n	8006e32 <_printf_i+0x102>
 8006dfe:	680e      	ldr	r6, [r1, #0]
 8006e00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	bf18      	it	ne
 8006e08:	b236      	sxthne	r6, r6
 8006e0a:	e7ef      	b.n	8006dec <_printf_i+0xbc>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	6820      	ldr	r0, [r4, #0]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	6029      	str	r1, [r5, #0]
 8006e14:	0601      	lsls	r1, r0, #24
 8006e16:	d501      	bpl.n	8006e1c <_printf_i+0xec>
 8006e18:	681e      	ldr	r6, [r3, #0]
 8006e1a:	e002      	b.n	8006e22 <_printf_i+0xf2>
 8006e1c:	0646      	lsls	r6, r0, #25
 8006e1e:	d5fb      	bpl.n	8006e18 <_printf_i+0xe8>
 8006e20:	881e      	ldrh	r6, [r3, #0]
 8006e22:	2f6f      	cmp	r7, #111	; 0x6f
 8006e24:	bf0c      	ite	eq
 8006e26:	2308      	moveq	r3, #8
 8006e28:	230a      	movne	r3, #10
 8006e2a:	4852      	ldr	r0, [pc, #328]	; (8006f74 <_printf_i+0x244>)
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e32:	6865      	ldr	r5, [r4, #4]
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	bfa8      	it	ge
 8006e38:	6821      	ldrge	r1, [r4, #0]
 8006e3a:	60a5      	str	r5, [r4, #8]
 8006e3c:	bfa4      	itt	ge
 8006e3e:	f021 0104 	bicge.w	r1, r1, #4
 8006e42:	6021      	strge	r1, [r4, #0]
 8006e44:	b90e      	cbnz	r6, 8006e4a <_printf_i+0x11a>
 8006e46:	2d00      	cmp	r5, #0
 8006e48:	d04d      	beq.n	8006ee6 <_printf_i+0x1b6>
 8006e4a:	4615      	mov	r5, r2
 8006e4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e50:	fb03 6711 	mls	r7, r3, r1, r6
 8006e54:	5dc7      	ldrb	r7, [r0, r7]
 8006e56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e5a:	4637      	mov	r7, r6
 8006e5c:	42bb      	cmp	r3, r7
 8006e5e:	460e      	mov	r6, r1
 8006e60:	d9f4      	bls.n	8006e4c <_printf_i+0x11c>
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d10b      	bne.n	8006e7e <_printf_i+0x14e>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	07de      	lsls	r6, r3, #31
 8006e6a:	d508      	bpl.n	8006e7e <_printf_i+0x14e>
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	6861      	ldr	r1, [r4, #4]
 8006e70:	4299      	cmp	r1, r3
 8006e72:	bfde      	ittt	le
 8006e74:	2330      	movle	r3, #48	; 0x30
 8006e76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e7e:	1b52      	subs	r2, r2, r5
 8006e80:	6122      	str	r2, [r4, #16]
 8006e82:	464b      	mov	r3, r9
 8006e84:	4621      	mov	r1, r4
 8006e86:	4640      	mov	r0, r8
 8006e88:	f8cd a000 	str.w	sl, [sp]
 8006e8c:	aa03      	add	r2, sp, #12
 8006e8e:	f7ff fedf 	bl	8006c50 <_printf_common>
 8006e92:	3001      	adds	r0, #1
 8006e94:	d14c      	bne.n	8006f30 <_printf_i+0x200>
 8006e96:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9a:	b004      	add	sp, #16
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	4834      	ldr	r0, [pc, #208]	; (8006f74 <_printf_i+0x244>)
 8006ea2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ea6:	6829      	ldr	r1, [r5, #0]
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eae:	6029      	str	r1, [r5, #0]
 8006eb0:	061d      	lsls	r5, r3, #24
 8006eb2:	d514      	bpl.n	8006ede <_printf_i+0x1ae>
 8006eb4:	07df      	lsls	r7, r3, #31
 8006eb6:	bf44      	itt	mi
 8006eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8006ebc:	6023      	strmi	r3, [r4, #0]
 8006ebe:	b91e      	cbnz	r6, 8006ec8 <_printf_i+0x198>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	f023 0320 	bic.w	r3, r3, #32
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	2310      	movs	r3, #16
 8006eca:	e7af      	b.n	8006e2c <_printf_i+0xfc>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	f043 0320 	orr.w	r3, r3, #32
 8006ed2:	6023      	str	r3, [r4, #0]
 8006ed4:	2378      	movs	r3, #120	; 0x78
 8006ed6:	4828      	ldr	r0, [pc, #160]	; (8006f78 <_printf_i+0x248>)
 8006ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006edc:	e7e3      	b.n	8006ea6 <_printf_i+0x176>
 8006ede:	0659      	lsls	r1, r3, #25
 8006ee0:	bf48      	it	mi
 8006ee2:	b2b6      	uxthmi	r6, r6
 8006ee4:	e7e6      	b.n	8006eb4 <_printf_i+0x184>
 8006ee6:	4615      	mov	r5, r2
 8006ee8:	e7bb      	b.n	8006e62 <_printf_i+0x132>
 8006eea:	682b      	ldr	r3, [r5, #0]
 8006eec:	6826      	ldr	r6, [r4, #0]
 8006eee:	1d18      	adds	r0, r3, #4
 8006ef0:	6961      	ldr	r1, [r4, #20]
 8006ef2:	6028      	str	r0, [r5, #0]
 8006ef4:	0635      	lsls	r5, r6, #24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	d501      	bpl.n	8006efe <_printf_i+0x1ce>
 8006efa:	6019      	str	r1, [r3, #0]
 8006efc:	e002      	b.n	8006f04 <_printf_i+0x1d4>
 8006efe:	0670      	lsls	r0, r6, #25
 8006f00:	d5fb      	bpl.n	8006efa <_printf_i+0x1ca>
 8006f02:	8019      	strh	r1, [r3, #0]
 8006f04:	2300      	movs	r3, #0
 8006f06:	4615      	mov	r5, r2
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	e7ba      	b.n	8006e82 <_printf_i+0x152>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	2100      	movs	r1, #0
 8006f10:	1d1a      	adds	r2, r3, #4
 8006f12:	602a      	str	r2, [r5, #0]
 8006f14:	681d      	ldr	r5, [r3, #0]
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f82f 	bl	8006f7c <memchr>
 8006f1e:	b108      	cbz	r0, 8006f24 <_printf_i+0x1f4>
 8006f20:	1b40      	subs	r0, r0, r5
 8006f22:	6060      	str	r0, [r4, #4]
 8006f24:	6863      	ldr	r3, [r4, #4]
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f2e:	e7a8      	b.n	8006e82 <_printf_i+0x152>
 8006f30:	462a      	mov	r2, r5
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	47d0      	blx	sl
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d0ab      	beq.n	8006e96 <_printf_i+0x166>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	079b      	lsls	r3, r3, #30
 8006f42:	d413      	bmi.n	8006f6c <_printf_i+0x23c>
 8006f44:	68e0      	ldr	r0, [r4, #12]
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	4298      	cmp	r0, r3
 8006f4a:	bfb8      	it	lt
 8006f4c:	4618      	movlt	r0, r3
 8006f4e:	e7a4      	b.n	8006e9a <_printf_i+0x16a>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4632      	mov	r2, r6
 8006f54:	4649      	mov	r1, r9
 8006f56:	4640      	mov	r0, r8
 8006f58:	47d0      	blx	sl
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d09b      	beq.n	8006e96 <_printf_i+0x166>
 8006f5e:	3501      	adds	r5, #1
 8006f60:	68e3      	ldr	r3, [r4, #12]
 8006f62:	9903      	ldr	r1, [sp, #12]
 8006f64:	1a5b      	subs	r3, r3, r1
 8006f66:	42ab      	cmp	r3, r5
 8006f68:	dcf2      	bgt.n	8006f50 <_printf_i+0x220>
 8006f6a:	e7eb      	b.n	8006f44 <_printf_i+0x214>
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	f104 0619 	add.w	r6, r4, #25
 8006f72:	e7f5      	b.n	8006f60 <_printf_i+0x230>
 8006f74:	08008d7f 	.word	0x08008d7f
 8006f78:	08008d90 	.word	0x08008d90

08006f7c <memchr>:
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	b2c9      	uxtb	r1, r1
 8006f82:	4402      	add	r2, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	d101      	bne.n	8006f8e <memchr+0x12>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e003      	b.n	8006f96 <memchr+0x1a>
 8006f8e:	7804      	ldrb	r4, [r0, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	428c      	cmp	r4, r1
 8006f94:	d1f6      	bne.n	8006f84 <memchr+0x8>
 8006f96:	bd10      	pop	{r4, pc}

08006f98 <memcpy>:
 8006f98:	440a      	add	r2, r1
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fa0:	d100      	bne.n	8006fa4 <memcpy+0xc>
 8006fa2:	4770      	bx	lr
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb0:	d1f9      	bne.n	8006fa6 <memcpy+0xe>
 8006fb2:	bd10      	pop	{r4, pc}

08006fb4 <memmove>:
 8006fb4:	4288      	cmp	r0, r1
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	eb01 0402 	add.w	r4, r1, r2
 8006fbc:	d902      	bls.n	8006fc4 <memmove+0x10>
 8006fbe:	4284      	cmp	r4, r0
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	d807      	bhi.n	8006fd4 <memmove+0x20>
 8006fc4:	1e43      	subs	r3, r0, #1
 8006fc6:	42a1      	cmp	r1, r4
 8006fc8:	d008      	beq.n	8006fdc <memmove+0x28>
 8006fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fd2:	e7f8      	b.n	8006fc6 <memmove+0x12>
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	4402      	add	r2, r0
 8006fd8:	428a      	cmp	r2, r1
 8006fda:	d100      	bne.n	8006fde <memmove+0x2a>
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fe6:	e7f7      	b.n	8006fd8 <memmove+0x24>

08006fe8 <_free_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4605      	mov	r5, r0
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d040      	beq.n	8007072 <_free_r+0x8a>
 8006ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff4:	1f0c      	subs	r4, r1, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfb8      	it	lt
 8006ffa:	18e4      	addlt	r4, r4, r3
 8006ffc:	f000 f910 	bl	8007220 <__malloc_lock>
 8007000:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <_free_r+0x8c>)
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x2c>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	4628      	mov	r0, r5
 800700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007010:	f000 b90c 	b.w	800722c <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x42>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	1821      	adds	r1, r4, r0
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1809      	addeq	r1, r1, r0
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x1e>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x4c>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x42>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1850      	adds	r0, r2, r1
 8007038:	42a0      	cmp	r0, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x6c>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	4401      	add	r1, r0
 8007040:	1850      	adds	r0, r2, r1
 8007042:	4283      	cmp	r3, r0
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x22>
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4401      	add	r1, r0
 800704e:	6011      	str	r1, [r2, #0]
 8007050:	6053      	str	r3, [r2, #4]
 8007052:	e7da      	b.n	800700a <_free_r+0x22>
 8007054:	d902      	bls.n	800705c <_free_r+0x74>
 8007056:	230c      	movs	r3, #12
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x22>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	1821      	adds	r1, r4, r0
 8007060:	428b      	cmp	r3, r1
 8007062:	bf01      	itttt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	1809      	addeq	r1, r1, r0
 800706a:	6021      	streq	r1, [r4, #0]
 800706c:	6063      	str	r3, [r4, #4]
 800706e:	6054      	str	r4, [r2, #4]
 8007070:	e7cb      	b.n	800700a <_free_r+0x22>
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	200002b8 	.word	0x200002b8

08007078 <sbrk_aligned>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	4e0e      	ldr	r6, [pc, #56]	; (80070b4 <sbrk_aligned+0x3c>)
 800707c:	460c      	mov	r4, r1
 800707e:	6831      	ldr	r1, [r6, #0]
 8007080:	4605      	mov	r5, r0
 8007082:	b911      	cbnz	r1, 800708a <sbrk_aligned+0x12>
 8007084:	f000 f8bc 	bl	8007200 <_sbrk_r>
 8007088:	6030      	str	r0, [r6, #0]
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 f8b7 	bl	8007200 <_sbrk_r>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d00a      	beq.n	80070ac <sbrk_aligned+0x34>
 8007096:	1cc4      	adds	r4, r0, #3
 8007098:	f024 0403 	bic.w	r4, r4, #3
 800709c:	42a0      	cmp	r0, r4
 800709e:	d007      	beq.n	80070b0 <sbrk_aligned+0x38>
 80070a0:	1a21      	subs	r1, r4, r0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f8ac 	bl	8007200 <_sbrk_r>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d101      	bne.n	80070b0 <sbrk_aligned+0x38>
 80070ac:	f04f 34ff 	mov.w	r4, #4294967295
 80070b0:	4620      	mov	r0, r4
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	200002bc 	.word	0x200002bc

080070b8 <_malloc_r>:
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	1ccd      	adds	r5, r1, #3
 80070be:	f025 0503 	bic.w	r5, r5, #3
 80070c2:	3508      	adds	r5, #8
 80070c4:	2d0c      	cmp	r5, #12
 80070c6:	bf38      	it	cc
 80070c8:	250c      	movcc	r5, #12
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	4607      	mov	r7, r0
 80070ce:	db01      	blt.n	80070d4 <_malloc_r+0x1c>
 80070d0:	42a9      	cmp	r1, r5
 80070d2:	d905      	bls.n	80070e0 <_malloc_r+0x28>
 80070d4:	230c      	movs	r3, #12
 80070d6:	2600      	movs	r6, #0
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4630      	mov	r0, r6
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e0:	4e2e      	ldr	r6, [pc, #184]	; (800719c <_malloc_r+0xe4>)
 80070e2:	f000 f89d 	bl	8007220 <__malloc_lock>
 80070e6:	6833      	ldr	r3, [r6, #0]
 80070e8:	461c      	mov	r4, r3
 80070ea:	bb34      	cbnz	r4, 800713a <_malloc_r+0x82>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff ffc2 	bl	8007078 <sbrk_aligned>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	4604      	mov	r4, r0
 80070f8:	d14d      	bne.n	8007196 <_malloc_r+0xde>
 80070fa:	6834      	ldr	r4, [r6, #0]
 80070fc:	4626      	mov	r6, r4
 80070fe:	2e00      	cmp	r6, #0
 8007100:	d140      	bne.n	8007184 <_malloc_r+0xcc>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	4631      	mov	r1, r6
 8007106:	4638      	mov	r0, r7
 8007108:	eb04 0803 	add.w	r8, r4, r3
 800710c:	f000 f878 	bl	8007200 <_sbrk_r>
 8007110:	4580      	cmp	r8, r0
 8007112:	d13a      	bne.n	800718a <_malloc_r+0xd2>
 8007114:	6821      	ldr	r1, [r4, #0]
 8007116:	3503      	adds	r5, #3
 8007118:	1a6d      	subs	r5, r5, r1
 800711a:	f025 0503 	bic.w	r5, r5, #3
 800711e:	3508      	adds	r5, #8
 8007120:	2d0c      	cmp	r5, #12
 8007122:	bf38      	it	cc
 8007124:	250c      	movcc	r5, #12
 8007126:	4638      	mov	r0, r7
 8007128:	4629      	mov	r1, r5
 800712a:	f7ff ffa5 	bl	8007078 <sbrk_aligned>
 800712e:	3001      	adds	r0, #1
 8007130:	d02b      	beq.n	800718a <_malloc_r+0xd2>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	442b      	add	r3, r5
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	e00e      	b.n	8007158 <_malloc_r+0xa0>
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	1b52      	subs	r2, r2, r5
 800713e:	d41e      	bmi.n	800717e <_malloc_r+0xc6>
 8007140:	2a0b      	cmp	r2, #11
 8007142:	d916      	bls.n	8007172 <_malloc_r+0xba>
 8007144:	1961      	adds	r1, r4, r5
 8007146:	42a3      	cmp	r3, r4
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	bf18      	it	ne
 800714c:	6059      	strne	r1, [r3, #4]
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	bf08      	it	eq
 8007152:	6031      	streq	r1, [r6, #0]
 8007154:	5162      	str	r2, [r4, r5]
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	4638      	mov	r0, r7
 800715a:	f104 060b 	add.w	r6, r4, #11
 800715e:	f000 f865 	bl	800722c <__malloc_unlock>
 8007162:	f026 0607 	bic.w	r6, r6, #7
 8007166:	1d23      	adds	r3, r4, #4
 8007168:	1af2      	subs	r2, r6, r3
 800716a:	d0b6      	beq.n	80070da <_malloc_r+0x22>
 800716c:	1b9b      	subs	r3, r3, r6
 800716e:	50a3      	str	r3, [r4, r2]
 8007170:	e7b3      	b.n	80070da <_malloc_r+0x22>
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	42a3      	cmp	r3, r4
 8007176:	bf0c      	ite	eq
 8007178:	6032      	streq	r2, [r6, #0]
 800717a:	605a      	strne	r2, [r3, #4]
 800717c:	e7ec      	b.n	8007158 <_malloc_r+0xa0>
 800717e:	4623      	mov	r3, r4
 8007180:	6864      	ldr	r4, [r4, #4]
 8007182:	e7b2      	b.n	80070ea <_malloc_r+0x32>
 8007184:	4634      	mov	r4, r6
 8007186:	6876      	ldr	r6, [r6, #4]
 8007188:	e7b9      	b.n	80070fe <_malloc_r+0x46>
 800718a:	230c      	movs	r3, #12
 800718c:	4638      	mov	r0, r7
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	f000 f84c 	bl	800722c <__malloc_unlock>
 8007194:	e7a1      	b.n	80070da <_malloc_r+0x22>
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	e7de      	b.n	8007158 <_malloc_r+0xa0>
 800719a:	bf00      	nop
 800719c:	200002b8 	.word	0x200002b8

080071a0 <_realloc_r>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	4680      	mov	r8, r0
 80071a6:	4614      	mov	r4, r2
 80071a8:	460e      	mov	r6, r1
 80071aa:	b921      	cbnz	r1, 80071b6 <_realloc_r+0x16>
 80071ac:	4611      	mov	r1, r2
 80071ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	f7ff bf81 	b.w	80070b8 <_malloc_r>
 80071b6:	b92a      	cbnz	r2, 80071c4 <_realloc_r+0x24>
 80071b8:	f7ff ff16 	bl	8006fe8 <_free_r>
 80071bc:	4625      	mov	r5, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c4:	f000 f838 	bl	8007238 <_malloc_usable_size_r>
 80071c8:	4284      	cmp	r4, r0
 80071ca:	4607      	mov	r7, r0
 80071cc:	d802      	bhi.n	80071d4 <_realloc_r+0x34>
 80071ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071d2:	d812      	bhi.n	80071fa <_realloc_r+0x5a>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff ff6e 	bl	80070b8 <_malloc_r>
 80071dc:	4605      	mov	r5, r0
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0ed      	beq.n	80071be <_realloc_r+0x1e>
 80071e2:	42bc      	cmp	r4, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	4631      	mov	r1, r6
 80071e8:	bf28      	it	cs
 80071ea:	463a      	movcs	r2, r7
 80071ec:	f7ff fed4 	bl	8006f98 <memcpy>
 80071f0:	4631      	mov	r1, r6
 80071f2:	4640      	mov	r0, r8
 80071f4:	f7ff fef8 	bl	8006fe8 <_free_r>
 80071f8:	e7e1      	b.n	80071be <_realloc_r+0x1e>
 80071fa:	4635      	mov	r5, r6
 80071fc:	e7df      	b.n	80071be <_realloc_r+0x1e>
	...

08007200 <_sbrk_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	2300      	movs	r3, #0
 8007204:	4d05      	ldr	r5, [pc, #20]	; (800721c <_sbrk_r+0x1c>)
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7fa fea8 	bl	8001f60 <_sbrk>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_sbrk_r+0x1a>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_sbrk_r+0x1a>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	200002c0 	.word	0x200002c0

08007220 <__malloc_lock>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__malloc_lock+0x8>)
 8007222:	f000 b811 	b.w	8007248 <__retarget_lock_acquire_recursive>
 8007226:	bf00      	nop
 8007228:	200002c4 	.word	0x200002c4

0800722c <__malloc_unlock>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__malloc_unlock+0x8>)
 800722e:	f000 b80c 	b.w	800724a <__retarget_lock_release_recursive>
 8007232:	bf00      	nop
 8007234:	200002c4 	.word	0x200002c4

08007238 <_malloc_usable_size_r>:
 8007238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800723c:	1f18      	subs	r0, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	bfbc      	itt	lt
 8007242:	580b      	ldrlt	r3, [r1, r0]
 8007244:	18c0      	addlt	r0, r0, r3
 8007246:	4770      	bx	lr

08007248 <__retarget_lock_acquire_recursive>:
 8007248:	4770      	bx	lr

0800724a <__retarget_lock_release_recursive>:
 800724a:	4770      	bx	lr

0800724c <_init>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr

08007258 <_fini>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr
